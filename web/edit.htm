<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <link href="/m.css" rel="stylesheet" type="text/css">
    <meta content="@FMWTK_SITE_NAME@" name="author">
    <meta content="width=device-width, height=device-height, user-scalable=yes" name="viewport">
    <meta name="generator" content="Futuramerlin Web Toolkit @FMWTK_VERSION@" />
    <title>@FMWTK_SITE_NAME@</title>

    <!-- third-party code: CSV parser -->
    <script src="papaparse.js" type="text/javascript"></script>

    <!-- Merged EITE implementation, including StageL and StageR -->
    <script src="eite.js" type="text/javascript"></script>

    <!-- And the code specific to this page -->
    <script>
        // @license magnet:?xt=urn:btih:0b31508aeb0634b347b8270c7bee4d411b5d4109&dn=agpl-3.0.txt AGPL-3.0

        window.onload = function() {
            (async function(){
                let dcNames=[];
                await setupIfNeeded();
                dcNames=await dcGetColumn('DcData', 1);
                for (let i=1;i<Object.keys(dcNames).length;i++) {
                    let elem=document.createElement('button');
                    elem.onclick=function(){
                        editAreaInsert(i+'');
                    }
                    elem.innerHTML=dcNames[i];
                    elem.class='dcInsertButton';
                    document.getElementById('DcSelection').appendChild(elem);
                }
                //console.log(dcNames);
                inputarea=document.getElementById('inputarea');
                inputarea.disabled=false;
                document.addEventListener('input', function() {
                    updateNearestDcLabel(inputarea);
                }, false);
                document.addEventListener('keydown', function() {
                    updateNearestDcLabel(inputarea);
                }, false);
                document.addEventListener('keyup', function() {
                    updateNearestDcLabel(inputarea);
                }, false);
                document.addEventListener('click', function() {
                    updateNearestDcLabel(inputarea);
                }, false);
                document.getElementById('UploadDocument').disabled=false;
                document.getElementById('DownloadDocument').disabled=false;
                document.getElementById('RunDocument').disabled=false;
                inFormat=document.getElementById('inFormat');
                inFormat.innerHTML='';
                let formats=[];
                formats = await listInputFormats();
                for (let i=0;i<Object.keys(formats).length;i++) {
                    let elem=document.createElement('option');
                    elem.innerHTML=formats[i];
                    inFormat.appendChild(elem);
                }
                inFormat.disabled=false;
                outFormat=document.getElementById('outFormat');
                outFormat.innerHTML='';
                formats = await listOutputFormats();
                for (let i=0;i<Object.keys(formats).length;i++) {
                    let elem=document.createElement('option');
                    elem.innerHTML=formats[i];
                    outFormat.appendChild(elem);
                }
                outFormat.disabled=false;
                window.setTimeout(function(){
                    let overlay=document.getElementById('overlay');
                    overlay.style.opacity=0;
                    overlay.style.transform='scale(3)';
                    let overlayLoadingSpinner=document.getElementById('overlayLoadingSpinner');
                    overlayLoadingSpinner.style.opacity=0;
                    window.setTimeout(function(){document.getElementById('overlay').remove()},1500);
                }, 500);
            })();
        };

        function startSpinner() {
            // Display loading spinner
            document.getElementById('inputarea').disabled='true';
            /* the [...foo] syntax is the "spread syntax". https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax */
            [...document.getElementsByTagName('select')].forEach(elem => {
                elem.disabled = true;
            });
            [...document.getElementsByTagName('button')].forEach(elem => {
                elem.disabled = true;
            });
            document.getElementById('eiteDocumentRoot').innerHTML = '';
            document.getElementById('eiteDocumentRoot').appendChild(document.importNode(document.getElementById('documentRootLoadingSpinnerTemplate').content, true));
        }

        function removeSpinner(clear=false) {
            // Remove the loading spinner
            if(clear) {
                document.getElementById('eiteDocumentRoot').innerHTML='';
            }
            document.getElementById('eiteDocumentRoot').style.backgroundColor="white";
            document.getElementById('inputarea').disabled=false;
            [...document.getElementsByTagName('select')].forEach(elem => {
                elem.disabled = false;
            });
            [...document.getElementsByTagName('button')].forEach(elem => {
                elem.disabled = false;
            });
        }
        function editAreaInsert(text) {
            typeInTextareaSpaced(document.getElementById('inputarea'), text);
        }
        function updateNearestDcLabel(el) {
            let start = el.selectionStart;
            let end = el.selectionEnd;
            let text = el.value;
            let before = text.substring(0, start);
            let after  = text.substring(end, text.length);
            let currentDc = '';
            after=after.substring(0, after.indexOf(' '));
            before=before+after;
            currentDc=before.trim().split(' ').slice(-1);
            currentDcLabel.innerHTML=currentDc;
        }
        function typeInTextarea(el, newText) {
            // Based on Jayant Bhawal's post at https://stackoverflow.com/questions/11076975/insert-text-into-textarea-at-cursor-position-javascript
            let start = el.selectionStart;
            let end = el.selectionEnd;
            let text = el.value;
            let before = text.substring(0, start);
            let after  = text.substring(end, text.length);
            el.value = (before + newText + after);
            el.selectionStart = el.selectionEnd = start + newText.length;
            el.focus();
        }
        function typeInTextareaSpaced(el, newText) {
            // Based on Jayant Bhawal's post at https://stackoverflow.com/questions/11076975/insert-text-into-textarea-at-cursor-position-javascript
            let start = el.selectionStart;
            let end = el.selectionEnd;
            let text = el.value;
            let before = text.substring(0, start);
            let after  = text.substring(end, text.length);
            if (before.substr(-1) === ' ') {
                el.value = (before + newText + ' ' + after);
            }
            else {
                el.value = (before + ' ' + newText + after);
            }
            el.selectionStart = el.selectionEnd = start + newText.length + 1;
            el.focus();
        }
        async function getInputDoc() {
            let res=await strToByteArray(document.getElementById('inputarea').value);
            return res;
        }

        async function RunDocumentHandler() {
            startSpinner();
            // Timeout is an awful hack to give the browser time to start displaying the loading spinner. There should be a better way to do this, but I don't know what it is. This method would presumably break on slower computers.
            window.setTimeout(async function(){
                // Do the computation-heavy work
                await runDocument(await importDocument('sems', await getInputDoc()));
                removeSpinner();
            }, 500);
        };

        function UploadDocument() {
            startSpinner();
            window.setTimeout(async function(){
                inFormat=document.getElementById('inFormat').value;
                if (!await isSupportedInputFormat(inFormat)) {
                    await implDie(inFormat+' is not a supported input format!');
                }
                let picker=document.getElementById('filepicker');
                picker.click();
                let file=picker.files[0];
                if (file !== undefined) {
                    let fr=new FileReader();
                    await new Promise(resolve => {
                        fr.onload=function (){
                            resolve(undefined);
                        };
                        fr.readAsArrayBuffer(file);
                    });
                    document.getElementById('inputarea').value = await strFromByteArray(await importAndExport(inFormat, 'integerList', new Uint8Array(fr.result)));
                }
                removeSpinner(true);
            }, 500);
        };

        function downloadNotify(name) {
            let elem=document.importNode(document.getElementById('downloadNotifyTemplate').content, true);
            elem.firstChild.innerHTML=name;
            elem.firstChild.id='downloadNotifyTempId';
            notificationOverlay=document.getElementById('notificationOverlay');
            notificationOverlay.style.display='block';
            notificationOverlay.style.opacity=1;
            document.body.appendChild(elem.firstChild);
            let elemAppended=document.getElementById('downloadNotifyTempId');
            elemAppended.removeAttribute('id');
            setTimeout(function() {
                let e=document.getElementsByClassName('downloadNotification');
                i=0;
                while (Object.keys(e).length > 0 && i < Object.keys(e).length) {
                    notificationOverlay.style.opacity=0;
                    e[0].style.opacity=0;
                    e[0].style.transform='translate(-50%, -50%) scale(0.75)';
                    i=i+1;
                };
                setTimeout(function(){
                    let e=document.getElementsByClassName('downloadNotification');
                    while (Object.keys(e).length > 0) {
                        e[0].parentNode.removeChild(e[0]);
                    };
                    notificationOverlay.style.display='none';
                }, 2000);
            }, 1250);
        }

        async function DownloadDocument() {
            startSpinner();
            window.setTimeout(async function(){
                outFormat=document.getElementById('outFormat').value;
                if (!await isSupportedOutputFormat(outFormat)) {
                    await implDie(outFormat+' is not a supported output format!');
                }
                let exported=Uint8Array.from(await importAndExport('sems', outFormat, await getInputDoc()));
                let blob=await new Blob([exported], { type: 'application/octet-stream' });
                let link=document.createElement('a');
                link.href=window.URL.createObjectURL(blob);
                let date=new Date();
                let outName='Export-'+date.getUTCFullYear()+'m'+(date.getUTCMonth()+1)+'d'+date.getUTCDate()+'-'+date.getUTCHours()+'-'+date.getUTCMinutes()+'-'+date.getUTCSeconds()+'-'+date.getUTCMilliseconds()+'-'+date.getTimezoneOffset()+'.'+await formatToExtension(outFormat);
                downloadNotify(outName);
                link.download=outName;
                link.dispatchEvent(new MouseEvent('click', {bubbles: true, cancelable: true, view: window}));
                removeSpinner(true);
            }, 500);
        };

        // @license-end
    </script>
    <style>
        .loadingSpinner {
            position: relative;
        }
        .loadingSpinner.docLoadingSpinner {
            background-color: #e3cdab;
        }
        #mainBox {
            display:flex;height:100vh;width:100vw;position:fixed;top:0;left:0;
        }
        body {
            overflow: hidden;
        }
        #DcSelection {
            background: rgba(0,0,0,0.3);
            display: flex;
            flex-direction: column;
            overflow-x: scroll;
        }
        #DcSelection > span {
            font-size: 1.8rem;
            font-weight: bold;
            text-shadow: 0 0 0.5rem white, 0 0 1rem white, 0 0 1rem white, 0 0 1rem white, 0 0 2rem white, 0 0 2rem white;
            text-align:center;
            background-color:rgba(255,255,255,0.5);
        }
        .documentRootOverlay {
            width: 100%;
            height:100%;position:absolute;top:0;left:0;background-color:#e3cdab;
        }
        .downloadNotification {
            width: 60vw;
            height: 60vh;
            background-color: rgba(255,255,255,0.95);
            position: absolute;
            top: 50%;
            left: 50%;
            margin-right: -50%;
            transform: translate(-50%, -50%) scale(1);
            box-shadow: 0 0 15px cornflowerblue;
            transition: 0.5s all;
            z-index: 4;
            padding: 1rem;
            padding-top: 1.5rem;
            font-size: 1.2rem;
        }
        .downloadNotification::before {
            content: '⤓';
            float: left;
            height: 100%;
            padding: 1rem;
            padding-top: 0rem;
            font-size: 4rem;
            color: cornflowerblue;
            text-shadow: 0 0 2px cornflowerblue;
        }
        #editorColumn {
            display:flex;flex-direction:column;
        }
        #editorButtons, #formatOptions {
            display:flex;flex-direction:row;
        }
        #formatOptions > div {
            padding:0.2rem;
            vertical-align: center;
            background-color:rgba(255,255,255,0.9);
        }
        #editorButtons > button, #formatOptions > select {
            width: 100%;
        }
        #DcSelection, #editorColumn, #eiteDocumentRoot, #inputarea {
            height: 100%;
            width: 100%;
        }
        #currentDcLabel {
            padding-left: 0.5rem;
            min-height: 1.5rem;
            background-color: rgba(255,255,255,0.9);
            border-top: 0.1rem solid #EEE;
            border-bottom: 0.075rem solid rgba(255,255,255,0.8);
            background-clip: content-box;
        }
        #filepicker {
            display: none;
        }
        #eiteDocumentRoot {
            border: 0.5rem solid rgba(255,255,255,0.9);background-color:white;background-clip:content-box;font-size: 3rem;
            transition: background-color 0.1s;
            position: relative;
        }
        #inputarea {
            background-color: white;
            border: 0;
        }
        #mainBox::before {
            background:-moz-element(#background) no-repeat fixed;
            filter:url(#f1);
            content: ' ';
            width: calc(100% + 6rem);
            height: calc(100% + 6rem);
            position: absolute;
            top: -3rem;
            left: -3rem;
            clip-path: inset(3rem 3rem 3rem 3rem);
            z-index: -1;
        }
        #notificationOverlay {
            background:-moz-element(#mainBox) no-repeat fixed;
            filter:url(#f1);
            content: ' ';
            width: calc(100vw + 6rem);
            height: calc(100vh + 6rem);
            position: absolute;
            top: -3rem;
            left: -3rem;
            clip-path: inset(3rem 3rem 3rem 3rem);
            z-index: 3;
            transition: 0.5s all;
            display: none;
        }
        #notificationOverlay::before {
            content: ' ';
            width:100%;
            height:100%;
            top:0;
            left:0;
            position:fixed;
            background-color: rgba(0,0,0,0.2);
        }
        #background {
            /* background-image: url('https://github.com/ethus3h/wreathe-backgrounds/raw/master/Backgrounds/DSCN0001.JPG');*/
            background-image: url('DSCN0001.JPG');
            background-size: cover;
            position: fixed;
            top: 0;
            left: 0;
            z-index: -1;
            width: 100vw;
            height: 100vh;
        }
        button {
            background-color: rgba(255,255,255,0.7);
            border-width: 0 0 0.1rem 0;
            border-color: white;
            border-style: solid;
            transition: 0.1s all;
            position: relative;
            font-size: 1.5rem;
            padding: 0.5rem;
        }
        button:not(:first-of-type)::before {
            content: ' ';
            display: block;
            height: 100%;
            float: left;
            position: absolute;
            width: 0.1rem;
            background-color: white;
            top: 0;
            left: 0;
        }
        button:hover {
            background-color: rgba(255,255,255,0.8);
        }
        button:active {
            background-color: rgba(200,200,200,0.7);
        }
        #svgFilter {
            height: 0;
        }
        #overlay {
            width: 100vw;
            height: 100vh;
            top: 0;
            left: 0;
            position: fixed;
            background-color:rgb(227,205,171);
            z-index: 100;
            transition: all 0.7s ease;
        }
        #overlay::after {
            content: ' ';
            width: 100vw;
            height: 100vh;
            top: 0;
            left: 0;
            position: fixed;
            z-index: 101;
            opacity: 0.5;
            background-image: url('/Wreathe/Backgrounds/DSCN0001.JPG');
            background-size: cover;
        }
    </style>
</head>
<body>
<h1>IT environment: edit document tool</h1>

<p class="breadcrumbs">Page location:
    <span><a href="/">Home</a></span>
</p>
<div id="overlay"><div id="overlayLoadingSpinner" class="loadingSpinner" style="background-color:#e3cdab;transform:all 0.2s;"></div></div>
<section id="mainBox">
    <div id="DcSelection">
        <span>Click to insert</span>
    </div>
    <div id="editorColumn">
        <textarea id="inputarea" disabled="true"></textarea>
        <div id="currentDcLabel"></div>
        <div id="formatOptions">
            <div>In: </div><select id="inFormat" disabled="true">
                <option value="">[not loaded]</option>
            </select>
            <div>Out: </div><select id="outFormat" disabled="true">
                <option value="">[not loaded]</option>
            </select>
        </div>
        <div id="editorButtons">
            <button disabled="true" id="UploadDocument" onClick="UploadDocument();">Import</button>
            <button disabled="true" id="DownloadDocument" onClick="DownloadDocument();">Export</button>
            <button disabled="true" id="RunDocument" onClick="RunDocumentHandler();">Run</button>
        </div>
    </div>
    <p id="eiteDocumentRoot"></p>
</section>
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" id="svgFilter">
    <defs>
        <filter id="f1" x="0" y="0">
            <feGaussianBlur in="SourceGraphic" stdDeviation="2" />
            <feComponentTransfer>
                <feFuncA type="discrete" tableValues="1 1"/>
            </feComponentTransfer>
        </filter>
    </defs>
</svg>
<div id="background"></div>
<div id="notificationOverlay"></div>
<template id="documentRootLoadingSpinnerTemplate"><div class="documentRootOverlay"><div class="loadingSpinner docLoadingSpinner"></div></div></template>
<template id="downloadNotifyTemplate"><div class="downloadNotification"></div></template>
<input type="file" id="filepicker"></input>
</body>
</html>
