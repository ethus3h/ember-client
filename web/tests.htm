<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <link href="/m.css" rel="stylesheet" type="text/css">
    <meta content="@FMWTK_SITE_NAME@" name="author">
    <meta content="width=device-width, height=device-height, user-scalable=yes" name="viewport">
    <meta name="generator" content="Futuramerlin Web Toolkit @FMWTK_VERSION@" />
    <title>@FMWTK_SITE_NAME@</title>
<!-- elliot9:59 PM
Just finished reworking all my code so far. It now has a much nicer API (e.g. if you include the now-single script file in an HTML page, all that's needed is to run loadAndRun('sems', 'idiomatic-hello-world.sems'); to run the specified document in the browser). It doesn't have any new capabilities, but it is much less awkward to use, better documented/structured/commented, and can be ported more easily to other platforms if desired (just add a new code generator frontend to the transpiler, and port the fairly small (~72 functions, <1k line) library of nonportable code).
elliot10:15 PM
Next I want to try getting a simple GUI (just HTML forms and JavaScript) for converting between Unicode and "EITE" (the new thing I'm working on) data formats, and for editing EITE data. Since the code is now wrapped up into a rather nicer library, it should be fairly trivial to get something like that working (although these things never seem to turn out as easy as I think they will). After that, I want to get document rendering to be a bit more sophisticated (support variables and function calls inside documents), get rendering through time working (right now it draws the completed document and stops running, rather than keeping it idle and having an event handling system, although I have started on the APIs for that), investigate Web Workers and get everything off the main thread (it runs asynchronously right now, but not in its own worker), provide a way for an EITE document to start a sub-document in its own thread, and get data persistence, an EITE-based GUI, and perhaps EITE-based servers and service discovery. That's quite a lot of things, though, and although it should all be technically possible, I'm not sure how far along in that list I'll get over the semester. I guess just a HTML GUI for people to play with the document format, and some more interesting abilities for the format, would be a nice start.
Anyway, I just wanted to give a bit of a status update on where this is at. Thanks! I hope your break has gone well; see you all in class! -->
    <!-- third-party code: CSV parser -->
    <script src="papaparse.js" type="text/javascript"></script>

    <!-- Merged EITE implementation, including StageL and StageR -->
    <script src="eite.js" type="text/javascript"></script>

    <!-- Just for this page -->
    <script src="tests.js" type="text/javascript"></script>
    <link href="soccer.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1>IT environment: tests</h1>

<p class="breadcrumbs">Page location:
    <span><a href="/">Home</a></span>
</p>

<p id="eiteDocumentRoot" style="bottom: 0;
    position: absolute;
    width: calc(100vw - 2rem);
    margin: 0rem;
    left:0rem;
    border: 1rem solid black;
    height: calc(100vh - 2rem); background-color:#ffffff; font-size: 3rem;"></p>
