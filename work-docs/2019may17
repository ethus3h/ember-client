+(0) ./stagel-bootstrap-codegen::863:codegenStatus='State: code:1, token #6 (2:6:1): command (16): if (17)'
+(0) ./stagel-bootstrap-codegen::864:codegenDebug
+(0) ./stagel-bootstrap-codegen:codegenDebug:201:echo 'State: code:1, token #6 (2:6:1): command (16): if (17) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code / Blocks: root  ident-r-s  102 / Arglist:  / (true/false/false).)'
State: code:1, token #6 (2:6:1): command (16): if (17) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code / Blocks: root  ident-r-s  102 / Arglist:  / (true/false/false).)
+(0) ./stagel-bootstrap-codegen::866:[[ command == \f\i\l\e\n\a\m\e ]]
+(1) ./stagel-bootstrap-codegen::868:[[ command == \c\o\m\m\e\n\t ]]
+(1) ./stagel-bootstrap-codegen::871:[[ command == \l\i\t\e\r\a\l\-\a\b\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::874:[[ command == \l\i\t\e\r\a\l\-\a\n\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::877:[[ command == \l\i\t\e\r\a\l\-\a\s\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::881:case "${stateStack[-1]}" in
+(1) ./stagel-bootstrap-codegen::958:echo 'Working on code'
Working on code
+(0) ./stagel-bootstrap-codegen::959:case "${tokens[$i - 1]}" in
+(0) ./stagel-bootstrap-codegen::988:codegenRoutineName=if
+(0) ./stagel-bootstrap-codegen::989:case "${tokens[$i]}" in
+(0) ./stagel-bootstrap-codegen::991:stateStack+=("test")
+(0) ./stagel-bootstrap-codegen::992:blockStack+=("test" "${tokens[$i]}")
+(0) ./stagel-bootstrap-codegen::993:codegenCommandInvocationStart
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationStart:502:codegenDebug 'Command invocation start'
+(0) ./stagel-bootstrap-codegen:codegenDebug:201:echo 'State: code:1, token #6 (2:6:1): command (16): if (17) (Debug info: Codegen: Command invocation start, routine :if / Args: Command invocation start / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/false/false).)'
State: code:1, token #6 (2:6:1): command (16): if (17) (Debug info: Codegen: Command invocation start, routine :if / Args: Command invocation start / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/false/false).)
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationStart:503:case "$codegenRoutineName" in
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationStart:578:codegenPrintIndentationSpaces
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:332:(( j=0 ))
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:332:(( j<codegenIndent ))
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:333:[[ '' == \-\-\f\o\r\c\e ]]
+(1) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:333:codegenOnNewLine
+(1) ./stagel-bootstrap-codegen:codegenOnNewLine:183:[[ true == \t\r\u\e ]]
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:334:codegenOutput '    '
+(0) ./stagel-bootstrap-codegen:codegenOutput:187:echo '(codegenOutput:     )'
(codegenOutput:     )
+(0) ./stagel-bootstrap-codegen:codegenOutput:188:print '    '
+(0) /usr/bin/ember_bash_setup:print:135:printf %s '    '
+(0) ./stagel-bootstrap-codegen:codegenOutput:189:[[      == *\
 ]]
+(1) ./stagel-bootstrap-codegen:codegenOutput:192:[[ true == \t\r\u\e ]]
+(0) ./stagel-bootstrap-codegen:codegenOutput:192:[[      == *\ \ \ \  ]]
+(0) ./stagel-bootstrap-codegen:codegenOutput:193:codegenNewLine=true
+(0) ./stagel-bootstrap-codegen:codegenOutput:194:codegenNewlineLookingForSpaces=true
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:332:(( j++  ))
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:332:(( j<codegenIndent ))
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:337:true
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationStart:579:codegenOutput 'if ('
+(0) ./stagel-bootstrap-codegen:codegenOutput:187:echo '(codegenOutput: if ()'
(codegenOutput: if ()
+(0) ./stagel-bootstrap-codegen:codegenOutput:188:print 'if ('
+(0) /usr/bin/ember_bash_setup:print:135:printf %s 'if ('
+(0) ./stagel-bootstrap-codegen:codegenOutput:189:[[ if ( == *\
 ]]
+(1) ./stagel-bootstrap-codegen:codegenOutput:192:[[ true == \t\r\u\e ]]
+(0) ./stagel-bootstrap-codegen:codegenOutput:192:[[ if ( == *\ \ \ \  ]]
+(1) ./stagel-bootstrap-codegen:codegenOutput:196:codegenNewLine=false
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationStart:643:codegenRoutineType=
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationStart:644:codegenRoutineName=
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationStart:645:codegenArgList=()
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::858:codegenIndent=1
+(0) ./stagel-bootstrap-codegen::862:echo

+(0) ./stagel-bootstrap-codegen::863:codegenStatus='State: test:1, token #7 (2:7:1): newline (19):  (20)'
+(0) ./stagel-bootstrap-codegen::864:codegenDebug
+(0) ./stagel-bootstrap-codegen:codegenDebug:201:echo 'State: test:1, token #7 (2:7:1): newline (19):  (20) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/false/false).)'
State: test:1, token #7 (2:7:1): newline (19):  (20) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/false/false).)
+(0) ./stagel-bootstrap-codegen::866:[[ newline == \f\i\l\e\n\a\m\e ]]
+(1) ./stagel-bootstrap-codegen::868:[[ newline == \c\o\m\m\e\n\t ]]
+(1) ./stagel-bootstrap-codegen::871:[[ newline == \l\i\t\e\r\a\l\-\a\b\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::874:[[ newline == \l\i\t\e\r\a\l\-\a\n\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::877:[[ newline == \l\i\t\e\r\a\l\-\a\s\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::881:case "${stateStack[-1]}" in
+(1) ./stagel-bootstrap-codegen::1057:echo 'Working on test'
Working on test
+(0) ./stagel-bootstrap-codegen::1058:case "${tokens[$i - 1]}" in
+(0) ./stagel-bootstrap-codegen::1124:[[ test != \t\e\s\t ]]
+(0) ./stagel-bootstrap-codegen::1135:[[ test == \t\e\s\t ]]
+(0) ./stagel-bootstrap-codegen::1135:[[ false != \t\r\u\e ]]
+(0) ./stagel-bootstrap-codegen::1136:codegenOutput '
'
+(0) ./stagel-bootstrap-codegen:codegenOutput:187:echo '(codegenOutput: 
)'
(codegenOutput: 
)
+(0) ./stagel-bootstrap-codegen:codegenOutput:188:print '
'
+(0) /usr/bin/ember_bash_setup:print:135:printf %s '
'
+(0) ./stagel-bootstrap-codegen:codegenOutput:189:[[ 
 == *\
 ]]
+(0) ./stagel-bootstrap-codegen:codegenOutput:190:codegenNewLine=true
+(0) ./stagel-bootstrap-codegen:codegenOutput:191:codegenNewlineLookingForSpaces=true
+(0) ./stagel-bootstrap-codegen::1137:codegenTestIndentDeferred=indent-deferred
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::858:codegenIndent=1
+(0) ./stagel-bootstrap-codegen::862:echo

+(0) ./stagel-bootstrap-codegen::863:codegenStatus='State: test:1, token #8 (3:10:1): indent (22):  (23)'
+(0) ./stagel-bootstrap-codegen::864:codegenDebug
+(0) ./stagel-bootstrap-codegen:codegenDebug:201:echo 'State: test:1, token #8 (3:10:1): indent (22):  (23) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/indent-deferred/false).)'
State: test:1, token #8 (3:10:1): indent (22):  (23) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/indent-deferred/false).)
+(0) ./stagel-bootstrap-codegen::866:[[ indent == \f\i\l\e\n\a\m\e ]]
+(1) ./stagel-bootstrap-codegen::868:[[ indent == \c\o\m\m\e\n\t ]]
+(1) ./stagel-bootstrap-codegen::871:[[ indent == \l\i\t\e\r\a\l\-\a\b\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::874:[[ indent == \l\i\t\e\r\a\l\-\a\n\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::877:[[ indent == \l\i\t\e\r\a\l\-\a\s\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::881:case "${stateStack[-1]}" in
+(1) ./stagel-bootstrap-codegen::1057:echo 'Working on test'
Working on test
+(0) ./stagel-bootstrap-codegen::1058:case "${tokens[$i - 1]}" in
+(0) ./stagel-bootstrap-codegen::1108:[[ false == \t\r\u\e ]]
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::858:codegenIndent=2
+(0) ./stagel-bootstrap-codegen::862:echo

+(0) ./stagel-bootstrap-codegen::863:codegenStatus='State: test:2, token #9 (3:10:2): command (25): condition (26)'
+(0) ./stagel-bootstrap-codegen::864:codegenDebug
+(0) ./stagel-bootstrap-codegen:codegenDebug:201:echo 'State: test:2, token #9 (3:10:2): command (25): condition (26) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/indent-deferred/false).)'
State: test:2, token #9 (3:10:2): command (25): condition (26) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/indent-deferred/false).)
+(0) ./stagel-bootstrap-codegen::866:[[ command == \f\i\l\e\n\a\m\e ]]
+(1) ./stagel-bootstrap-codegen::868:[[ command == \c\o\m\m\e\n\t ]]
+(1) ./stagel-bootstrap-codegen::871:[[ command == \l\i\t\e\r\a\l\-\a\b\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::874:[[ command == \l\i\t\e\r\a\l\-\a\n\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::877:[[ command == \l\i\t\e\r\a\l\-\a\s\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::881:case "${stateStack[-1]}" in
+(1) ./stagel-bootstrap-codegen::1057:echo 'Working on test'
Working on test
+(0) ./stagel-bootstrap-codegen::1058:case "${tokens[$i - 1]}" in
+(0) ./stagel-bootstrap-codegen::1071:[[ condition =~ ^(return|new|set)$ ]]
+(1) ./stagel-bootstrap-codegen::1071:[[ test == \t\e\s\t ]]
+(0) ./stagel-bootstrap-codegen::1071:[[ false == \t\r\u\e ]]
+(1) ./stagel-bootstrap-codegen::1085:[[ test != \t\e\s\t ]]
+(0) ./stagel-bootstrap-codegen::1091:codegenRoutineName=condition
+(0) ./stagel-bootstrap-codegen::1092:[[ command == ident-r-* ]]
+(1) ./stagel-bootstrap-codegen::1093:codegenCommandInvocationStart
+(1) ./stagel-bootstrap-codegen:codegenCommandInvocationStart:502:codegenDebug 'Command invocation start'
+(1) ./stagel-bootstrap-codegen:codegenDebug:201:echo 'State: test:2, token #9 (3:10:2): command (25): condition (26) (Debug info: Codegen: Command invocation start, routine :condition / Args: Command invocation start / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/indent-deferred/false).)'
State: test:2, token #9 (3:10:2): command (25): condition (26) (Debug info: Codegen: Command invocation start, routine :condition / Args: Command invocation start / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/indent-deferred/false).)
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationStart:503:case "$codegenRoutineName" in
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationStart:632:codegenPrintIndentationSpaces
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:332:(( j=0 ))
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:332:(( j<codegenIndent ))
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:333:[[ '' == \-\-\f\o\r\c\e ]]
+(1) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:333:codegenOnNewLine
+(1) ./stagel-bootstrap-codegen:codegenOnNewLine:183:[[ true == \t\r\u\e ]]
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:334:codegenOutput '    '
+(0) ./stagel-bootstrap-codegen:codegenOutput:187:echo '(codegenOutput:     )'
(codegenOutput:     )
+(0) ./stagel-bootstrap-codegen:codegenOutput:188:print '    '
+(0) /usr/bin/ember_bash_setup:print:135:printf %s '    '
+(0) ./stagel-bootstrap-codegen:codegenOutput:189:[[      == *\
 ]]
+(1) ./stagel-bootstrap-codegen:codegenOutput:192:[[ true == \t\r\u\e ]]
+(0) ./stagel-bootstrap-codegen:codegenOutput:192:[[      == *\ \ \ \  ]]
+(0) ./stagel-bootstrap-codegen:codegenOutput:193:codegenNewLine=true
+(0) ./stagel-bootstrap-codegen:codegenOutput:194:codegenNewlineLookingForSpaces=true
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:332:(( j++  ))
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:332:(( j<codegenIndent ))
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:333:[[ '' == \-\-\f\o\r\c\e ]]
+(1) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:333:codegenOnNewLine
+(1) ./stagel-bootstrap-codegen:codegenOnNewLine:183:[[ true == \t\r\u\e ]]
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:334:codegenOutput '    '
+(0) ./stagel-bootstrap-codegen:codegenOutput:187:echo '(codegenOutput:     )'
(codegenOutput:     )
+(0) ./stagel-bootstrap-codegen:codegenOutput:188:print '    '
+(0) /usr/bin/ember_bash_setup:print:135:printf %s '    '
+(0) ./stagel-bootstrap-codegen:codegenOutput:189:[[      == *\
 ]]
+(1) ./stagel-bootstrap-codegen:codegenOutput:192:[[ true == \t\r\u\e ]]
+(0) ./stagel-bootstrap-codegen:codegenOutput:192:[[      == *\ \ \ \  ]]
+(0) ./stagel-bootstrap-codegen:codegenOutput:193:codegenNewLine=true
+(0) ./stagel-bootstrap-codegen:codegenOutput:194:codegenNewlineLookingForSpaces=true
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:332:(( j++  ))
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:332:(( j<codegenIndent ))
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:337:true
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationStart:633:case "$targetLang" in
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationStart:635:codegenOutput 'await condition('
+(0) ./stagel-bootstrap-codegen:codegenOutput:187:echo '(codegenOutput: await condition()'
(codegenOutput: await condition()
+(0) ./stagel-bootstrap-codegen:codegenOutput:188:print 'await condition('
+(0) /usr/bin/ember_bash_setup:print:135:printf %s 'await condition('
+(0) ./stagel-bootstrap-codegen:codegenOutput:189:[[ await condition( == *\
 ]]
+(1) ./stagel-bootstrap-codegen:codegenOutput:192:[[ true == \t\r\u\e ]]
+(0) ./stagel-bootstrap-codegen:codegenOutput:192:[[ await condition( == *\ \ \ \  ]]
+(1) ./stagel-bootstrap-codegen:codegenOutput:196:codegenNewLine=false
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationStart:643:codegenRoutineType=
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationStart:644:codegenRoutineName=
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationStart:645:codegenArgList=()
+(0) ./stagel-bootstrap-codegen::1094:[[ test == \t\e\s\t ]]
+(0) ./stagel-bootstrap-codegen::1095:testParameterFound=true
+(0) ./stagel-bootstrap-codegen::1097:stateStack+=("arglist")
+(0) ./stagel-bootstrap-codegen::1098:blockStack+=("arglist-command" "${tokens[$i]}")
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::858:codegenIndent=2
+(0) ./stagel-bootstrap-codegen::862:echo

+(0) ./stagel-bootstrap-codegen::863:codegenStatus='State: arglist:2, token #10 (3:18:2): newline (28):  (29)'
+(0) ./stagel-bootstrap-codegen::864:codegenDebug
+(0) ./stagel-bootstrap-codegen:codegenDebug:201:echo 'State: arglist:2, token #10 (3:18:2): newline (28):  (29) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code test arglist / Blocks: root  ident-r-s  102 test if arglist-command condition / Arglist:  / (true/indent-deferred/true).)'
State: arglist:2, token #10 (3:18:2): newline (28):  (29) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code test arglist / Blocks: root  ident-r-s  102 test if arglist-command condition / Arglist:  / (true/indent-deferred/true).)
+(0) ./stagel-bootstrap-codegen::866:[[ newline == \f\i\l\e\n\a\m\e ]]
+(1) ./stagel-bootstrap-codegen::868:[[ newline == \c\o\m\m\e\n\t ]]
+(1) ./stagel-bootstrap-codegen::871:[[ newline == \l\i\t\e\r\a\l\-\a\b\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::874:[[ newline == \l\i\t\e\r\a\l\-\a\n\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::877:[[ newline == \l\i\t\e\r\a\l\-\a\s\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::881:case "${stateStack[-1]}" in
+(1) ./stagel-bootstrap-codegen::1057:echo 'Working on arglist'
Working on arglist
+(0) ./stagel-bootstrap-codegen::1058:case "${tokens[$i - 1]}" in
+(0) ./stagel-bootstrap-codegen::1124:[[ arglist != \t\e\s\t ]]
+(0) ./stagel-bootstrap-codegen::1127:[[ condition != \e\l\s\e ]]
+(0) ./stagel-bootstrap-codegen::1128:codegenCommandInvocationArglist
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:661:codegenDebug 'Command invocation argument list'
+(0) ./stagel-bootstrap-codegen:codegenDebug:201:echo 'State: arglist:2, token #10 (3:18:2): newline (28):  (29) (Debug info: Codegen: Command invocation argument list, routine : / Args: Command invocation argument list / States: root code routine-definition-end code test arglist / Blocks: root  ident-r-s  102 test if arglist-command condition / Arglist:  / (true/indent-deferred/true).)'
State: arglist:2, token #10 (3:18:2): newline (28):  (29) (Debug info: Codegen: Command invocation argument list, routine : / Args: Command invocation argument list / States: root code routine-definition-end code test arglist / Blocks: root  ident-r-s  102 test if arglist-command condition / Arglist:  / (true/indent-deferred/true).)
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:316:case "$targetLang" in
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:665:argumentCount=0
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:666:codegenLastKnownArglistCount=0
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:667:(( k=0 ))
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:667:(( k<argumentCount ))
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:684:codegenRoutineType=
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:685:codegenRoutineName=
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:686:codegenArgList=()
+(0) ./stagel-bootstrap-codegen::1130:codegenCommandInvocationEnd
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:690:codegenDebug 'Command invocation end'
+(0) ./stagel-bootstrap-codegen:codegenDebug:201:echo 'State: arglist:2, token #10 (3:18:2): newline (28):  (29) (Debug info: Codegen: Command invocation end, routine : / Args: Command invocation end / States: root code routine-definition-end code test arglist / Blocks: root  ident-r-s  102 test if arglist-command condition / Arglist:  / (true/indent-deferred/true).)'
State: arglist:2, token #10 (3:18:2): newline (28):  (29) (Debug info: Codegen: Command invocation end, routine : / Args: Command invocation end / States: root code routine-definition-end code test arglist / Blocks: root  ident-r-s  102 test if arglist-command condition / Arglist:  / (true/indent-deferred/true).)
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:691:case "$codegenRoutineName" in
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:709:case "$targetLang" in
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:711:[[ arglist-command == \c\o\m\m\a\n\d ]]
+(1) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:711:codegenOutput ')'
+(1) ./stagel-bootstrap-codegen:codegenOutput:187:echo '(codegenOutput: ))'
(codegenOutput: ))
+(0) ./stagel-bootstrap-codegen:codegenOutput:188:print ')'
+(0) /usr/bin/ember_bash_setup:print:135:printf %s ')'
+(0) ./stagel-bootstrap-codegen:codegenOutput:189:[[ ) == *\
 ]]
+(1) ./stagel-bootstrap-codegen:codegenOutput:192:[[ true == \t\r\u\e ]]
+(0) ./stagel-bootstrap-codegen:codegenOutput:192:[[ ) == *\ \ \ \  ]]
+(1) ./stagel-bootstrap-codegen:codegenOutput:196:codegenNewLine=false
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:719:contains test root code routine-definition-end code test arglist
+(0) /usr/bin/ember_bash_setup:contains:765:local e
+(0) /usr/bin/ember_bash_setup:contains:766:for e in "${@:2}"
+(0) /usr/bin/ember_bash_setup:contains:766:[[ root == \t\e\s\t ]]
+(1) /usr/bin/ember_bash_setup:contains:766:for e in "${@:2}"
+(1) /usr/bin/ember_bash_setup:contains:766:[[ code == \t\e\s\t ]]
+(1) /usr/bin/ember_bash_setup:contains:766:for e in "${@:2}"
+(1) /usr/bin/ember_bash_setup:contains:766:[[ routine-definition-end == \t\e\s\t ]]
+(1) /usr/bin/ember_bash_setup:contains:766:for e in "${@:2}"
+(1) /usr/bin/ember_bash_setup:contains:766:[[ code == \t\e\s\t ]]
+(1) /usr/bin/ember_bash_setup:contains:766:for e in "${@:2}"
+(1) /usr/bin/ember_bash_setup:contains:766:[[ test == \t\e\s\t ]]
+(0) /usr/bin/ember_bash_setup:contains:766:return 0
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:722:blockStackRemoveLast
+(0) ./stagel-bootstrap-codegen:blockStackRemoveLast:841:print_r root '' ident-r-s ' 102' test if arglist-command condition
+(0) /usr/bin/ember_bash_setup:print_r:222:arr=("$@")
+(0) /usr/bin/ember_bash_setup:print_r:222:local arr
+(0) /usr/bin/ember_bash_setup:print_r:223:declare -p arr
declare -a arr=([0]="root" [1]="" [2]="ident-r-s" [3]=" 102" [4]="test" [5]="if" [6]="arglist-command" [7]="condition")
+(0) ./stagel-bootstrap-codegen:blockStackRemoveLast:842:[[ condition == '' ]]
+(0) ./stagel-bootstrap-codegen:blockStackRemoveLast:846:unset 'blockStack[-1]'
+(0) ./stagel-bootstrap-codegen:blockStackRemoveLast:847:[[ arglist-command == \r\o\o\t ]]
+(1) ./stagel-bootstrap-codegen:blockStackRemoveLast:848:unset 'blockStack[-1]'
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:723:codegenRoutineType=
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:724:codegenRoutineName=
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:725:codegenArgList=()
+(0) ./stagel-bootstrap-codegen::1131:unset 'stateStack[-1]'
+(0) ./stagel-bootstrap-codegen::1132:i=26
+(0) ./stagel-bootstrap-codegen::1135:[[ test == \t\e\s\t ]]
+(0) ./stagel-bootstrap-codegen::1135:[[ true != \t\r\u\e ]]
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::858:codegenIndent=2
+(0) ./stagel-bootstrap-codegen::862:echo

+(0) ./stagel-bootstrap-codegen::863:codegenStatus='State: test:2, token #10 (3:18:2): newline (28):  (29)'
+(0) ./stagel-bootstrap-codegen::864:codegenDebug
+(0) ./stagel-bootstrap-codegen:codegenDebug:201:echo 'State: test:2, token #10 (3:18:2): newline (28):  (29) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/indent-deferred/true).)'
State: test:2, token #10 (3:18:2): newline (28):  (29) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/indent-deferred/true).)
+(0) ./stagel-bootstrap-codegen::866:[[ newline == \f\i\l\e\n\a\m\e ]]
+(1) ./stagel-bootstrap-codegen::868:[[ newline == \c\o\m\m\e\n\t ]]
+(1) ./stagel-bootstrap-codegen::871:[[ newline == \l\i\t\e\r\a\l\-\a\b\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::874:[[ newline == \l\i\t\e\r\a\l\-\a\n\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::877:[[ newline == \l\i\t\e\r\a\l\-\a\s\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::881:case "${stateStack[-1]}" in
+(1) ./stagel-bootstrap-codegen::1057:echo 'Working on test'
Working on test
+(0) ./stagel-bootstrap-codegen::1058:case "${tokens[$i - 1]}" in
+(0) ./stagel-bootstrap-codegen::1124:[[ test != \t\e\s\t ]]
+(0) ./stagel-bootstrap-codegen::1135:[[ test == \t\e\s\t ]]
+(0) ./stagel-bootstrap-codegen::1135:[[ true != \t\r\u\e ]]
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::858:codegenIndent=1
+(0) ./stagel-bootstrap-codegen::862:echo

+(0) ./stagel-bootstrap-codegen::863:codegenStatus='State: test:1, token #11 (4:6:1): dedent (31):  (32)'
+(0) ./stagel-bootstrap-codegen::864:codegenDebug
+(0) ./stagel-bootstrap-codegen:codegenDebug:201:echo 'State: test:1, token #11 (4:6:1): dedent (31):  (32) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/indent-deferred/true).)'
State: test:1, token #11 (4:6:1): dedent (31):  (32) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/indent-deferred/true).)
+(0) ./stagel-bootstrap-codegen::866:[[ dedent == \f\i\l\e\n\a\m\e ]]
+(1) ./stagel-bootstrap-codegen::868:[[ dedent == \c\o\m\m\e\n\t ]]
+(1) ./stagel-bootstrap-codegen::871:[[ dedent == \l\i\t\e\r\a\l\-\a\b\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::874:[[ dedent == \l\i\t\e\r\a\l\-\a\n\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::877:[[ dedent == \l\i\t\e\r\a\l\-\a\s\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::881:case "${stateStack[-1]}" in
+(1) ./stagel-bootstrap-codegen::1057:echo 'Working on test'
Working on test
+(0) ./stagel-bootstrap-codegen::1058:case "${tokens[$i - 1]}" in
+(0) ./stagel-bootstrap-codegen::1149:codegenCommandInvocationArglist
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:661:codegenDebug 'Command invocation argument list'
+(0) ./stagel-bootstrap-codegen:codegenDebug:201:echo 'State: test:1, token #11 (4:6:1): dedent (31):  (32) (Debug info: Codegen: Command invocation argument list, routine : / Args: Command invocation argument list / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/indent-deferred/true).)'
State: test:1, token #11 (4:6:1): dedent (31):  (32) (Debug info: Codegen: Command invocation argument list, routine : / Args: Command invocation argument list / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/indent-deferred/true).)
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:316:case "$targetLang" in
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:665:argumentCount=0
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:666:codegenLastKnownArglistCount=0
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:667:(( k=0 ))
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:667:(( k<argumentCount ))
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:684:codegenRoutineType=
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:685:codegenRoutineName=
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationArglist:686:codegenArgList=()
+(0) ./stagel-bootstrap-codegen::1150:codegenCommandInvocationEnd
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:690:codegenDebug 'Command invocation end'
+(0) ./stagel-bootstrap-codegen:codegenDebug:201:echo 'State: test:1, token #11 (4:6:1): dedent (31):  (32) (Debug info: Codegen: Command invocation end, routine : / Args: Command invocation end / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/indent-deferred/true).)'
State: test:1, token #11 (4:6:1): dedent (31):  (32) (Debug info: Codegen: Command invocation end, routine : / Args: Command invocation end / States: root code routine-definition-end code test / Blocks: root  ident-r-s  102 test if / Arglist:  / (true/indent-deferred/true).)
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:691:case "$codegenRoutineName" in
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:709:case "$targetLang" in
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:711:[[ test == \c\o\m\m\a\n\d ]]
+(1) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:711:codegenOutput ')'
+(1) ./stagel-bootstrap-codegen:codegenOutput:187:echo '(codegenOutput: ))'
(codegenOutput: ))
+(0) ./stagel-bootstrap-codegen:codegenOutput:188:print ')'
+(0) /usr/bin/ember_bash_setup:print:135:printf %s ')'
+(0) ./stagel-bootstrap-codegen:codegenOutput:189:[[ ) == *\
 ]]
+(1) ./stagel-bootstrap-codegen:codegenOutput:192:[[ true == \t\r\u\e ]]
+(0) ./stagel-bootstrap-codegen:codegenOutput:192:[[ ) == *\ \ \ \  ]]
+(1) ./stagel-bootstrap-codegen:codegenOutput:196:codegenNewLine=false
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:719:contains test root code routine-definition-end code test
+(0) /usr/bin/ember_bash_setup:contains:765:local e
+(0) /usr/bin/ember_bash_setup:contains:766:for e in "${@:2}"
+(0) /usr/bin/ember_bash_setup:contains:766:[[ root == \t\e\s\t ]]
+(1) /usr/bin/ember_bash_setup:contains:766:for e in "${@:2}"
+(1) /usr/bin/ember_bash_setup:contains:766:[[ code == \t\e\s\t ]]
+(1) /usr/bin/ember_bash_setup:contains:766:for e in "${@:2}"
+(1) /usr/bin/ember_bash_setup:contains:766:[[ routine-definition-end == \t\e\s\t ]]
+(1) /usr/bin/ember_bash_setup:contains:766:for e in "${@:2}"
+(1) /usr/bin/ember_bash_setup:contains:766:[[ code == \t\e\s\t ]]
+(1) /usr/bin/ember_bash_setup:contains:766:for e in "${@:2}"
+(1) /usr/bin/ember_bash_setup:contains:766:[[ test == \t\e\s\t ]]
+(0) /usr/bin/ember_bash_setup:contains:766:return 0
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:722:blockStackRemoveLast
+(0) ./stagel-bootstrap-codegen:blockStackRemoveLast:841:print_r root '' ident-r-s ' 102' test if
+(0) /usr/bin/ember_bash_setup:print_r:222:arr=("$@")
+(0) /usr/bin/ember_bash_setup:print_r:222:local arr
+(0) /usr/bin/ember_bash_setup:print_r:223:declare -p arr
declare -a arr=([0]="root" [1]="" [2]="ident-r-s" [3]=" 102" [4]="test" [5]="if")
+(0) ./stagel-bootstrap-codegen:blockStackRemoveLast:842:[[ if == '' ]]
+(0) ./stagel-bootstrap-codegen:blockStackRemoveLast:846:unset 'blockStack[-1]'
+(0) ./stagel-bootstrap-codegen:blockStackRemoveLast:847:[[ test == \r\o\o\t ]]
+(1) ./stagel-bootstrap-codegen:blockStackRemoveLast:848:unset 'blockStack[-1]'
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:723:codegenRoutineType=
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:724:codegenRoutineName=
+(0) ./stagel-bootstrap-codegen:codegenCommandInvocationEnd:725:codegenArgList=()
+(0) ./stagel-bootstrap-codegen::1152:unset 'stateStack[-1]'
+(0) ./stagel-bootstrap-codegen::1153:i=29
+(0) ./stagel-bootstrap-codegen::1154:[[ code == \t\e\s\t ]]
+(1) ./stagel-bootstrap-codegen::1155:stateStack+=("code")
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::858:codegenIndent=1
+(0) ./stagel-bootstrap-codegen::862:echo

+(0) ./stagel-bootstrap-codegen::863:codegenStatus='State: code:1, token #11 (4:6:1): dedent (31):  (32)'
+(0) ./stagel-bootstrap-codegen::864:codegenDebug
+(0) ./stagel-bootstrap-codegen:codegenDebug:201:echo 'State: code:1, token #11 (4:6:1): dedent (31):  (32) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code code / Blocks: root  ident-r-s  102 / Arglist:  / (true/indent-deferred/true).)'
State: code:1, token #11 (4:6:1): dedent (31):  (32) (Debug info: Codegen: , routine : / Args:  / States: root code routine-definition-end code code / Blocks: root  ident-r-s  102 / Arglist:  / (true/indent-deferred/true).)
+(0) ./stagel-bootstrap-codegen::866:[[ dedent == \f\i\l\e\n\a\m\e ]]
+(1) ./stagel-bootstrap-codegen::868:[[ dedent == \c\o\m\m\e\n\t ]]
+(1) ./stagel-bootstrap-codegen::871:[[ dedent == \l\i\t\e\r\a\l\-\a\b\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::874:[[ dedent == \l\i\t\e\r\a\l\-\a\n\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::877:[[ dedent == \l\i\t\e\r\a\l\-\a\s\-\s\t\a\r\t ]]
+(1) ./stagel-bootstrap-codegen::881:case "${stateStack[-1]}" in
+(1) ./stagel-bootstrap-codegen::958:echo 'Working on code'
Working on code
+(0) ./stagel-bootstrap-codegen::959:case "${tokens[$i - 1]}" in
+(0) ./stagel-bootstrap-codegen::973:[[ ident-r-s == \i\d\e\n\t\-\r\-\v ]]
+(1) ./stagel-bootstrap-codegen::974:codegenDedent
+(1) ./stagel-bootstrap-codegen:codegenDedent:377:codegenDebug Dedent
+(1) ./stagel-bootstrap-codegen:codegenDebug:201:echo 'State: code:1, token #11 (4:6:1): dedent (31):  (32) (Debug info: Codegen: Dedent, routine : / Args: Dedent / States: root code routine-definition-end code code / Blocks: root  ident-r-s  102 / Arglist:  / (true/indent-deferred/true).)'
State: code:1, token #11 (4:6:1): dedent (31):  (32) (Debug info: Codegen: Dedent, routine : / Args: Dedent / States: root code routine-definition-end code code / Blocks: root  ident-r-s  102 / Arglist:  / (true/indent-deferred/true).)
+(0) ./stagel-bootstrap-codegen:codegenDedent:379:codegenPrintIndentationSpaces
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:332:(( j=0 ))
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:332:(( j<codegenIndent ))
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:333:[[ '' == \-\-\f\o\r\c\e ]]
+(1) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:333:codegenOnNewLine
+(1) ./stagel-bootstrap-codegen:codegenOnNewLine:183:[[ false == \t\r\u\e ]]
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:332:(( j++  ))
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:332:(( j<codegenIndent ))
+(0) ./stagel-bootstrap-codegen:codegenPrintIndentationSpaces:337:true
+(0) ./stagel-bootstrap-codegen:codegenDedent:381:case "$targetLang" in
+(0) ./stagel-bootstrap-codegen:codegenDedent:383:codegenOutput '}
'
+(0) ./stagel-bootstrap-codegen:codegenOutput:187:echo '(codegenOutput: }
)'
(codegenOutput: }
)
+(0) ./stagel-bootstrap-codegen:codegenOutput:188:print '}
'
+(0) /usr/bin/ember_bash_setup:print:135:printf %s '}
'
+(0) ./stagel-bootstrap-codegen:codegenOutput:189:[[ }
 == *\
 ]]
+(0) ./stagel-bootstrap-codegen:codegenOutput:190:codegenNewLine=true
+(0) ./stagel-bootstrap-codegen:codegenOutput:191:codegenNewlineLookingForSpaces=true
+(0) ./stagel-bootstrap-codegen::975:unset 'stateStack[-1]'
+(0) ./stagel-bootstrap-codegen::976:blockStackRemoveLast
+(0) ./stagel-bootstrap-codegen:blockStackRemoveLast:841:print_r root '' ident-r-s ' 102'
+(0) /usr/bin/ember_bash_setup:print_r:222:arr=("$@")
+(0) /usr/bin/ember_bash_setup:print_r:222:local arr
+(0) /usr/bin/ember_bash_setup:print_r:223:declare -p arr
declare -a arr=([0]="root" [1]="" [2]="ident-r-s" [3]=" 102")
+(0) ./stagel-bootstrap-codegen:blockStackRemoveLast:842:[[  102 == '' ]]
+(0) ./stagel-bootstrap-codegen:blockStackRemoveLast:846:unset 'blockStack[-1]'
+(0) ./stagel-bootstrap-codegen:blockStackRemoveLast:847:[[ ident-r-s == \r\o\o\t ]]
+(1) ./stagel-bootstrap-codegen:blockStackRemoveLast:848:unset 'blockStack[-1]'
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::856:(( i++  ))
+(0) ./stagel-bootstrap-codegen::856:(( i<tokenCount ))
+(0) ./stagel-bootstrap-codegen::857:((  (i+1) % 3  ))
+(0) ./stagel-bootstrap-codegen::858:codegenIndent=1
+(0) ./stagel-bootstrap-codegen::862:echo

