#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

# Build third-party components

[[ -d ./build-temp/distfiles ]] || die "Make sure the required dependency files are in ./build-temp/distfiles, or run build-scripts/dist-fetch to get them from your /usr/portage."

source ./support/build-scripts/dist-versions
cd ./build-temp/build || die

echo "Building libc++abi"
# https://libcxxabi.llvm.org/
(
mkdir libcxxabi-build
cd libcxxabi-build
#export CC=clang CXX=clang++
cmake -DLLVM_ENABLE_PROJECTS=libcxxabi -DCMAKE_CXXFLAGS="--target=wasm32-unknown-unknown-wasm" -DCMAKE_CFLAGS="--target=wasm32-unknown-unknown-wasm" ../llvm-project-${myLlvmCommit}/llvm
make
#make check-libcxx
) || die


echo "Building libc++"
# https://libcxx.llvm.org/docs/BuildingLibcxx.html
(
mkdir libcxx-build
cd libcxx-build
export CC=clang CXX=clang++
cmake -DLLVM_PATH=path/to/separate/llvm \
        -DLIBCXX_CXX_ABI=libcxxabi \
        -DLIBCXX_CXX_ABI_INCLUDE_PATHS=path/to/separate/libcxxabi/include ../llvm-project-${myLlvmCommit}/libcxx
make
#make check-libcxx
) || die

echo "Building wat2wasm"
cd ./wabt-"$myWabtVersion" || die
re2c -W -Werror --no-generation-date -bc8 -o src/wast-lexer-gen.cc src/wast-lexer.cc
src/wasm2c_tmpl.py -o src/wasm2c.include.c src/wasm2c.c.tmpl
src/wasm2c_tmpl.py -o src/wasm2c.include.h src/wasm2c.h.tmpl
rm src/wasm2c.{c,h}.tmpl src/wasm2c_tmpl.py src/wabt.post.js
for file in src/*.cc; do
    clang++ -v -D__STDC_FORMAT_MACROS=1 -D__STDC_LIMIT_MACROS=1 -I. -I../gcc-7.3.0/libstdc++-v3/include -std=c++11 -g -Wold-style-cast -Wall -Wextra -Wno-unused-parameter -Wpointer-arith -Wuninitialized -fno-exceptions -o "$file".o -c -Ofast --target=wasm32-unknown-unknown-wasm "$file"
done

touch ./build-temp/dist-build-ready
