#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

# Build third-party components
[[ -d ./build-temp/distfiles ]] || die "Make sure the required dependency files are in ./build-temp/distfiles, or run build-scripts/dist-fetch to get them from your /usr/portage."

source ./support/build-scripts/dist-versions || die
cd ./build-temp/build || die

echo "Building wat2wasm"
cd ./wabt-"$myWabtVersion" || die

cp -r "../emscripten-$myEmscriptenCommit" "./emscripten" || die
mkdir "./third_party" || die "Error creating empty third_party directory"
mv "../googletest-release-${myGoogletestVersion}" "./third_party/gtest" || die "Error moving gtest"
cp -r "../ply-${myPlyVersion}" "./third_party/ply" || die "Error copying ply"
cp -r "../ply-${myPlyVersion}" "./emscripten/third_party/ply" || die "Error copying ply"
mv "../testsuite-${myTestsuiteCommit}" "./third_party/testsuite" || die "Error moving testsuite"

mkdir "./src/prebuilt" || die "Error creating empty src/prebuilt directory"
re2c -W -Werror --no-generation-date -bc8 -o src/wast-lexer-gen.cc src/wast-lexer.cc
src/wasm2c_tmpl.py -o src/wasm2c.include.c src/wasm2c.c.tmpl
src/wasm2c_tmpl.py -o src/wasm2c.include.h src/wasm2c.h.tmpl
rm src/wasm2c.{c,h}.tmpl src/wasm2c_tmpl.py src/wabt.post.js
(
    cd "$(readlink -f .)" || die
    EM_CONFIG="$(readlink -f .)/.emscripten"
    export EM_CONFIG
    rm -f "$EM_CONFIG"
    rm -f ./emscripten/.emscripten
    rm -rf ./.emscripten_cache
    ln -s "$EM_CONFIG" ./emscripten/.emscripten # shared:ERROR: File /nvme0n1p5/build-temp/build/wabt-1.0.8/emscripten/.emscripten passed to --em-config does not exist!
    EM_CACHE="$(readlink -f .)/.emscripten_cache"
    export EM_CACHE
    EMCC_DEBUG="1"
    export EMCC_DEBUG

    echo 'import os' >> "$EM_CONFIG"
    echo 'EMSCRIPTEN_ROOT = '\'"$(readlink -f .)"\' >> "$EM_CONFIG"
    echo 'LLVM_ROOT = '\''/usr/lib/llvm/9/bin'\' >> "$EM_CONFIG"
    echo 'BINARYEN_ROOT = '\'\' >> "$EM_CONFIG" # Their comment says: "if not set, we will use it from ports". Will this download stuff?
    echo 'NODE_JS = '\''/usr/bin/node'\' >> "$EM_CONFIG"
    echo 'JAVA = '\''java'\' >> "$EM_CONFIG" # Does it really need this
    echo 'TEMP_DIR = '\''/tmp'\' >> "$EM_CONFIG"
    echo 'COMPILER_ENGINE = NODE_JS' >> "$EM_CONFIG" # Does it really need this
    echo "COMPILER_OPTS = ['-O0']" >> "$EM_CONFIG"

    make demo
)
#for file in src/*.cc; do
    #clang++ -v -D__STDC_FORMAT_MACROS=1 -D__STDC_LIMIT_MACROS=1 -I. -Xclang -isystem../emscripten-${myEmscriptenCommit}/system/include/libcxx -Xclang -isystem../emscripten-${myEmscriptenCommit}/system/include/libc -std=c++11 -D_LIBCPP_ABI_VERSION=2 -nostdinc -Xclang -nobuiltininc -Xclang -nostdsysteminc -g -Wold-style-cast -Wall -Wextra -Wno-unused-parameter -Wpointer-arith -Wuninitialized -fno-exceptions -o "$file".o -c -Ofast --target=wasm32-unknown-unknown-wasm "$file"
#done

touch ../dist-build-ready
