#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

# Build the EITE implementation.

rm -rf ./built
mkdir ./built

sicmd="./support/build-scripts/build-wrapped"
#[[ -f "./build-wrapped" ]] && sicmd=./"$sicmd"

debugBuild="--no-debug"
if [[ "$1" == "--debug" ]]; then
    debugBuild="--debug"
    shift
elif [[ "$1" == "--no-debug" ]]; then
    debugBuild="--no-debug"
    shift
fi

if [[ "$1" == "--fast" ]]; then
    debugBuild="--no-debug"
    typecheckBuild="--no-runtime-type-checks"
    shift
fi

distBuild="false"
if [[ "$1" == "--dist-build" ]]; then
    distBuild="true"
    shift
fi

echo "Building, please wait..."
if [[ "$1" == "-v" ]]; then
    shift
    "$sicmd" "$debugBuild" "$@"
    [[ "$distBuild" == "true" ]] && ./support/dist-build
    [[ "$distBuild" == "true" ]] && ./support/build-scripts/build-wasm-common
elif [[ "$1" == "--somewhat-verbose" ]]; then
    shift
    # StageL goes to /dev/null, while other things are verbose
    "$sicmd" "$debugBuild" "$@" &> /dev/null
    [[ "$distBuild" == "true" ]] && ./support/dist-build
    [[ "$distBuild" == "true" ]] && ./support/build-scripts/build-wasm-common
else
    "$sicmd" "$debugBuild" "$@" &> /dev/null
    [[ "$distBuild" == "true" ]] && ./support/dist-build &> /dev/null
    [[ "$distBuild" == "true" ]] && ./support/build-scripts/build-wasm-common &> /dev/null
fi

./support/build-scripts/build-web
./support/build-scripts/build-edit-webextension

echo "Done."
