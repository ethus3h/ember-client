#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup_core &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup_core could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

# Build the EITE implementation.

sicmd="./support/build-scripts/build-wrapped"
#[[ -f "./build-wrapped" ]] && sicmd=./"$sicmd"

cache="--no-cache"
cacheDir="."
if [[ "$1" == "--cache" ]]; then
    cache="--cache"
    shift
    cacheDir="$1"
    shift
elif [[ "$1" == "--no-cache" ]]; then
    cache="--no-cache"
    shift
    cacheDir="$1"
    shift
fi
debugBuild="--debug"
if [[ "$1" == "--debug" ]]; then
    debugBuild="--debug"
    shift
elif [[ "$1" == "--no-debug" ]]; then
    debugBuild="--no-debug"
    shift
fi
typecheckBuild="--runtime-type-checks"
if [[ "$1" == "--runtime-type-checks" ]]; then
    typecheckBuild="--runtime-type-checks"
    shift
elif [[ "$1" == "--no-runtime-type-checks" ]]; then
    typecheckBuild="--no-runtime-type-checks"
    shift
fi

if [[ "$1" == "--fast" ]]; then
    debugBuild="--no-debug"
    typecheckBuild="--no-runtime-type-checks"
    shift
fi

distBuild="--no-dist-build"
if [[ "$1" == "--dist-build" ]]; then
    distBuild="--dist-build"
    shift
elif [[ "$1" == "--no-dist-build" ]]; then
    distBuild="--no-dist-build"
    shift
fi

if [[ -f ./support/.build-type ]]; then
    buildType="$(<./support/.build-type)"
    echo "Building output: $buildType"
fi

echo "Building, please wait..."

# Handling for both dist as the build type, or as a --dist-build command-line argument (but ignore the --dist-build argument if a build type were supplied)
if [[ -n "$buildType" ]]; then
    distBuild="--no-dist-build"
fi
if [[ "dist" == "$buildType" ]]; then
    distBuild="--dist-build"
fi

[[ "$distBuild" == "--dist-build" ]] && rm -rf ./built
mkdir -p ./built
mkdir -p ./build-temp

[[ -d ./build-temp/distfiles ]] || die "Make sure the required dependency files are in ./build-temp/distfiles, or run support/dist-fetch to get them from your /usr/portage or the Web."

verbose=""
if [[ "-v" == "$1" ]]; then
    shift
    verbose="yes"
elif [[ "--somewhat-verbose" == "$1" ]]; then
    verbose="somewhat"
fi

if [[ -z "$buildType" ]] || [[ "bootstrap" == "$buildType" ]]; then
    # Test the bootstrap scripts
    tests/stagel-run-bootstrap-tests || die "StageL tests failed!"

# FIXME: Split up implementation-parts (stagel-bootstrap, stagel, stager-[language])
if [[ "$1" == "-v" ]]; then
    shift
    if [[ -z "$buildType" ]] || [[ "implementation-parts" == "$buildType" ]]; then
        "$sicmd" "$cache" "$cacheDir" "$debugBuild" "$typecheckBuild" "$@"
    fi
    [[ "$distBuild" == "--dist-build" ]] && ./support/dist-build
elif [[ "$1" == "--somewhat-verbose" ]]; then
    shift
    # StageL goes to /dev/null, while other things are verbose
    if [[ -z "$buildType" ]] || [[ "implementation-parts" == "$buildType" ]]; then
        "$sicmd" "$cache" "$cacheDir" "$debugBuild" "$typecheckBuild" "$@" &> /dev/null
    fi
    [[ "$distBuild" == "--dist-build" ]] && ./support/dist-build
else
    if [[ -z "$buildType" ]] || [[ "implementation-parts" == "$buildType" ]]; then
        "$sicmd" "$cache" "$cacheDir" "$debugBuild" "$typecheckBuild" "$@" &> /dev/null
    fi
    [[ "$distBuild" == "--dist-build" ]] && ./support/dist-build &> /dev/null
fi

if [[ -z "$buildType" ]] || [[ "portable" == "$buildType" ]]; then
    cp -ra ./implementation/portable/eite ./built/
fi

if [[ -z "$buildType" ]] || [[ "web" == "$buildType" ]]; then
    ./support/build-scripts/build-web
fi
if [[ -z "$buildType" ]] || [[ "edit-webextension" == "$buildType" ]]; then
    ./support/build-scripts/build-edit-webextension
fi

echo "Done."
