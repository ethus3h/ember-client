#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup_core &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup_core could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

# Build the libraries and interface that comprise DDC, for a given language. This consists of: StageL language core library, StageR library, native StageL/StageR speedup/validation implementations (validation = meaning it could run a native sha512sum at the same time as the StageR one, to ensure the StageR one works correctly), and NDW (non-determinism wrapper).

target="$1"
shift
[[ -z "$1" ]] && die "No target language was specified to build."

bootstrap=""
if [[ "$1" == "--bootstrap" ]]; then
    bootstrap="--bootstrap"
    shift
fi
cache="--no-cache"
cacheDir="."
if [[ "$1" == "--cache" ]]; then
    cache="--cache"
    shift
    cacheDir="$1"
    shift
elif [[ "$1" == "--no-cache" ]]; then
    cache="--no-cache"
    shift
    cacheDir="$1"
    shift
fi
debugBuild="--debug"
if [[ "$1" == "--debug" ]]; then
    debugBuild="--debug"
    shift
elif [[ "$1" == "--no-debug" ]]; then
    debugBuild="--no-debug"
    shift
fi
typecheckBuild="--runtime-type-checks"
if [[ "$1" == "--runtime-type-checks" ]]; then
    typecheckBuild="--runtime-type-checks"
    shift
elif [[ "$1" == "--no-runtime-type-checks" ]]; then
    typecheckBuild="--no-runtime-type-checks"
    shift
fi

slcmd="./support/build-scripts/build-stagel-inner"
#[[ -f "./stagel-build-internal-stagel-inner" ]] && slcmd=./"$slcmd"
srcmd="./support/build-scripts/build-stager-inner"
#[[ -f "./stagel-build-internal-stager-inner" ]] && srcmd=./"$srcmd"

rm -rf ./built/implementation-parts
mkdir ./built/implementation-parts

# FIXME: the "find" commands (I think?) don't return nonzero exit status on failure

[[ -d "./implementation/stagel-cores/$target" ]] || continue

# StageL language core for the target language

mkdir -p "./built/stagel-build-temp/implementation/stagel-cores/$target"

rm -f ./implementation/stagel-cores/"$target"/core."$target"

echo '// @license magnet:?xt=urn:btih:0b31508aeb0634b347b8270c7bee4d411b5d4109&dn=agpl-3.0.txt AGPL-3.0'$'\n' > ./built/stagel-build-temp/implementation/stagel-cores/"$target"/core."$target"

find ./implementation/stagel-cores/"$target"/ -name '*.'"$target" -exec "$slcmd" {} "$target" \;

echo $'\n''// @license-end' >> ./built/stagel-build-temp/implementation/stagel-cores/"$target"/core."$target"

# StageR

mkdir -p "./built/stagel-build-temp/implementation/portable/stagel"

rm -f ./built/stagel-build-temp/implementation/portable/stagel/portable."$target"

echo '// @license magnet:?xt=urn:btih:0b31508aeb0634b347b8270c7bee4d411b5d4109&dn=agpl-3.0.txt AGPL-3.0'$'\n' > ./built/stagel-build-temp/implementation/portable/stagel/portable."$target"

find ./implementation/portable/stagel/ -name '*.stagel' -exec "$srcmd" "$cache" "$cacheDir" "$debugBuild" "$typecheckBuild" {} "$target" \;

echo $'\n''// @license-end' >> ./built/stagel-build-temp/implementation/portable/stagel/portable."$target"

# NDW

mkdir -p "./built/stagel-build-temp/implementation/ndw/$target"

rm -f ./implementation/ndw/"$target"/ndw."$target"

echo '// @license magnet:?xt=urn:btih:0b31508aeb0634b347b8270c7bee4d411b5d4109&dn=agpl-3.0.txt AGPL-3.0'$'\n' > ./built/stagel-build-temp/implementation/ndw/"$target"/ndw."$target"

find ./implementation/ndw/"$target"/ -name '*.'"$target" -exec "$slcmd" {} "$target" "ndw" \;

echo $'\n''// @license-end' >> ./built/stagel-build-temp/implementation/ndw/"$target"/ndw."$target"

# Done StageL and StageR into ./built/stagel-build-temp; now move the build products into place and clean up

mkdir -p ./built/implementation-parts/"$target"

mv ./built/stagel-build-temp/implementation/stagel-cores/"$target"/core."$target" ./built/implementation-parts/"$target"/
mv ./built/stagel-build-temp/implementation/portable/stagel/portable."$target" ./built/implementation-parts/"$target"/
mv ./built/stagel-build-temp/implementation/ndw/"$target"/ndw."$target" ./built/implementation-parts/"$target"/

echo '// @license magnet:?xt=urn:btih:0b31508aeb0634b347b8270c7bee4d411b5d4109&dn=agpl-3.0.txt AGPL-3.0'$'\n' >> ./built/implementation-parts/"$target"/speedups."$target"
cat ./implementation/speedups/speedups."$target" >> ./built/implementation-parts/"$target"/speedups."$target"
echo $'\n''// @license-end' >> ./built/implementation-parts/"$target"/speedups."$target"

cp ./built/implementation-parts/"$target"/core."$target" ./built/implementation-parts/"$target"/eite."$target"
echo >> ./built/implementation-parts/"$target"/eite."$target"
cat ./built/implementation-parts/"$target"/portable."$target" >> ./built/implementation-parts/"$target"/eite."$target"
echo >> ./built/implementation-parts/"$target"/eite."$target"
cat ./built/implementation-parts/"$target"/speedups."$target" >> ./built/implementation-parts/"$target"/eite."$target"
cat ./built/implementation-parts/"$target"/ndw."$target" >> ./built/implementation-parts/"$target"/eite."$target"

rm -r "./built/stagel-build-temp"
