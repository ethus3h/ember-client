#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

[[ ! -d ./distfiles ]] && die "Make sure the required dependency files are in ./distfiles, or run build-scripts/dist-fetch to get them from your /usr/portage."

source ./support/build-scripts/dist-versions

# Build WASM version of wat2wasm

echo "Building wat2wasm"
rm -rf ./temp
mkdir ./temp
(
    cd ./temp || die
    tar xozf ../distfiles/wabt-"$myWabtVersion".tar.gz
    rm -r ./wabt-"$myWabtVersion"/src/prebuilt
    mv ./wabt-"$myWabtVersion"/src/ ./
    rm -r ./wabt-"$myWabtVersion"
    mkdir ./wabt-"$myWabtVersion"
    mv ./src ./wabt-"$myWabtVersion"/
    cd ./wabt-"$myWabtVersion" || die
    
) || die
#rm -r ./temp

# Build WASM components

cToWasm() {
    echo "Building WASM file: $1"
    # https://web.archive.org/web/20190212131643/https://stackoverflow.com/questions/45295339/can-i-somehow-build-webassembly-code-without-the-emscripten-glue
    clang "$1" -o "$1".o -ansi -pedantic -Werror -DSTACK_SIZE=1044480 -w -Wno-implicit-function-declaration -ffunction-sections -fdata-sections --target=wasm32-unknown-unknown-wasm -c -Ofast
    mkdir -p temp
    mv "$1".o temp/
    (
        cd temp
        # Link with libc:
        #src/work/wasm-install/bin/lld -flavor wasm -entry=main --allow-undefined-file=src/work/wasm-install/sysroot/lib/wasm.syms -o src/work/torture-lld-musl/20020510-1.c.o.wasm src/work/torture-o/20020510-1.c.o src/work/wasm-install/sysroot/lib/libc.a
        # Or without a libc (you need to provide one somehow):
        # --allow-undefined allows undefined symbols in the linked executable. E.g. "extern" declarations. Should I remove that flag?
        wasm-ld --print-gc-sections --no-gc-sections --no-entry -o "$1".o.wasm "$1".o # -u _start #  --allow-undefined
        wasm2wat --inline-exports --inline-imports -f --generate-names -o "$1".wat "$1".o.wasm
        mv "$1".wat ../

        # Or, if you want an assembly file instead:
        #src/work/wasm-install/bin/clang src/work/gcc/gcc/testsuite/gcc.c-torture/execute/20020227-1.c -o src/work/torture-s/20020227-1.c.s --std=gnu89 -DSTACK_SIZE=1044480 -w -Wno-implicit-function-declaration --target=wasm32-unknown-unknown -S -O2 --sysroot=src/work/wasm-install/sysroot
        # And get the binary file:
        #src/work/wasm-install/bin/wast2wasm src/work/torture-s2wasm/loop-6.c.s.wast -o src/work/torture-wast2wasm/loop-6.c.s.wast.wasm
    ) || die
}

cp -r ./implementation/portable/wasm-common ./built/
cd ./built/wasm-common/
cToWasm simple.c
rm -r temp
