<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd"
[
	<!ENTITY digitPart "[0-9](?:_?[0-9])*">
	<!ENTITY beforeDigit "(?&lt;![\.\w[:^ascii:]])">
	<!ENTITY beforePointFloat "(?&lt;![\w[:^ascii:]])">
]>
<!-- StageL syntax highlighting file based on https://raw.githubusercontent.com/KDE/syntax-highlighting/master/data/syntax/python.xml -->
<language name="StageL" version="1" style="python" indenter="python" kateversion="5.0" section="Sources" extensions="*.stagel" mimetype="application/x-stagel" casesensitive="1" author="Michael Bueker (original Python highlighter); Elli Chandler (StageL changes)" license="MIT (original Python highlighter); AGPL-3 (StageL changes)">
	<highlighting>
		<list name="import">
			<item>import</item>
			<item>from</item>
			<item>as</item>
		</list>
		<list name="defs">
			<item>class</item>
			<item>def</item>
			<item>del</item>
			<item>global</item>
			<item>lambda</item>
			<item>nonlocal</item>
		</list>
		<list name="flow">
			<item>if</item>
			<item>elif</item>
			<item>else</item>
			<item>{</item>
			<item>while</item>
			<item>until</item>
			<item>return</item>
		</list>
		<contexts>
			<context name="Normal" attribute="Normal Text" lineEndContext="#stay">
				<keyword attribute="Import" String="import" context="#stay"/>
				<keyword attribute="Definition Keyword" String="defs" context="#stay"/>
				<keyword attribute="Flow Control Keyword" String="flow" context="#stay"/>
				<keyword attribute="Extensions" String="bindings" context="#stay"/>
				<keyword attribute="Exceptions" String="exceptions" context="#stay"/>
				<keyword attribute="Overloaders" String="overloaders" context="#stay"/>
				<RegExpr attribute="Normal Text" String="[a-zA-Z_][a-zA-Z_0-9]{2,}" context="#stay"/>

				<RegExpr attribute="Int" String="&beforeDigit;(?:[1-9](?:_?\d)*|0(?:_?0)*)\b" context="#stay"/>

				<DetectChar attribute="Normal Text" char="{" context="Dictionary" beginRegion="Dictionary"/>
				<DetectChar attribute="Normal Text" char="[" context="List" beginRegion="List"/>
				<DetectChar attribute="Normal Text" char="(" context="Tuple" beginRegion="Tuple"/>

				<DetectChar attribute="Comment" char="#" context="Hash comment"/>

				<IncludeRules context="StringVariants" />
			</context>

			<context name="#CheckForString" attribute="Normal Text" lineEndContext="#pop" fallthrough="true" fallthroughContext="#pop">
				<DetectSpaces/>
				<LineContinue attribute="Normal Text" context="CheckForStringNext"/>
			</context>

			<context name="CheckForStringNext" attribute="Normal Text" lineEndContext="#pop" fallthrough="true" fallthroughContext="#pop">
				<DetectSpaces/>
				<LineContinue attribute="Normal Text" context="CheckForStringNext"/>
				<IncludeRules context="StringVariants"/>
			</context>

			<context name="StringVariants" attribute="Normal Text" lineEndContext="#stay">
				<DetectSpaces/>

				<RegExpr attribute="String" String="u?'"                  insensitive="true" context="Single A-string"/>
			</context>

			<context name="CommentVariants" attribute="Normal Text" lineEndContext="#stay">
				<DetectSpaces/>

				<RegExpr attribute="Comment" String="u?'''"                insensitive="true" firstNonSpace="true" context="Triple A-comment" beginRegion="Triple A-region"/>
				<RegExpr attribute="Comment" String="u?&quot;&quot;&quot;" insensitive="true" firstNonSpace="true" context="Triple Q-comment" beginRegion="Triple Q-region"/>
				<RegExpr attribute="Comment" String="u?'"                  insensitive="true" firstNonSpace="true" context="Single A-comment"/>
				<RegExpr attribute="Comment" String="u?&quot;"             insensitive="true" firstNonSpace="true" context="Single Q-comment"/>

				<RegExpr attribute="Comment" String="(u?r|ru)'''"                insensitive="true" firstNonSpace="true" context="Triple A-comment" beginRegion="Triple A-region"/>
				<RegExpr attribute="Comment" String="(u?r|ru)&quot;&quot;&quot;" insensitive="true" firstNonSpace="true" context="Triple Q-comment" beginRegion="Triple Q-region"/>
				<RegExpr attribute="Comment" String="(u?r|ru)'"                  insensitive="true" firstNonSpace="true" context="Single A-comment"/>
				<RegExpr attribute="Comment" String="(u?r|ru)&quot;"             insensitive="true" firstNonSpace="true" context="Single Q-comment"/>
			</context>

			<context name="Dictionary" attribute="Normal Text" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces/>
				<DetectChar attribute="Normal Text" char="}" context="#pop" endRegion="Dictionary"/>
				<IncludeRules context="StringVariants" />
				<IncludeRules context="Normal" />
			</context>

			<context name="List" attribute="Normal Text" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces/>
				<DetectChar attribute="Normal Text" char="]" context="#pop" endRegion="List"/>
				<IncludeRules context="StringVariants" />
				<IncludeRules context="Normal" />
			</context>

			<context name="Tuple" attribute="Normal Text" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces/>
				<DetectChar attribute="Normal Text" char=")" context="#pop" endRegion="Tuple"/>
				<IncludeRules context="StringVariants" />
				<IncludeRules context="Normal" />
			</context>

			<!-- Comments -->

			<context name="Hash comment" attribute="Comment" lineEndContext="#pop">
				<IncludeRules context="##Alerts" />
				<IncludeRules context="##Modelines" />
			</context>

			<!-- Strings -->

		<itemDatas>
			<itemData name="Normal Text" defStyleNum="dsNormal" spellChecking="false"/>
			<itemData name="Definition Keyword" defStyleNum="dsKeyword" spellChecking="false"/>
			<itemData name="Operator" defStyleNum="dsOperator" spellChecking="false"/>
			<itemData name="Operator Keyword" defStyleNum="dsKeyword" spellChecking="false"/>
			<itemData name="Flow Control Keyword" defStyleNum="dsControlFlow" spellChecking="false"/>
			<itemData name="Builtin Function" defStyleNum="dsBuiltIn" spellChecking="false"/>
			<itemData name="Special Variable" defStyleNum="dsVariable" spellChecking="false"/>
			<itemData name="Extensions" defStyleNum="dsExtension" spellChecking="false"/>
			<itemData name="Exceptions" defStyleNum="dsPreprocessor" spellChecking="false"/>
			<itemData name="Overloaders" defStyleNum="dsFunction" spellChecking="false"/>
			<itemData name="Import" defStyleNum="dsImport" spellChecking="false"/>
			<itemData name="Float" defStyleNum="dsFloat" spellChecking="false"/>
			<itemData name="Int" defStyleNum="dsDecVal" spellChecking="false"/>
			<itemData name="Hex" defStyleNum="dsBaseN" spellChecking="false"/>
			<itemData name="Octal" defStyleNum="dsBaseN" spellChecking="false"/>
			<itemData name="Binary" defStyleNum="dsBaseN" spellChecking="false"/>
			<itemData name="Complex" defStyleNum="dsOthers" spellChecking="false"/>
			<itemData name="Comment" defStyleNum="dsComment"/>
			<itemData name="String" defStyleNum="dsString"/>
			<itemData name="Raw String" defStyleNum="dsVerbatimString"/>
			<itemData name="F-String" defStyleNum="dsSpecialString"/>
			<itemData name="Raw F-String" defStyleNum="dsVerbatimString"/>
			<itemData name="String Char" defStyleNum="dsChar" spellChecking="false"/>
			<itemData name="String Substitution" defStyleNum="dsSpecialChar" spellChecking="false"/>
			<itemData name="Decorator" defStyleNum="dsAttribute" spellChecking="false"/>
			<itemData name="Error" defStyleNum="dsError"/>
		</itemDatas>
	</highlighting>
	<general>
		<folding indentationsensitive="1" />
		<emptyLines>
			<emptyLine regexpr="(?:\s+|\s*#.*)"/>
		</emptyLines>
		<comments>
			<comment name="singleLine" start="#" position="afterwhitespace"/>
		</comments>
		<keywords casesensitive="1" additionalDeliminator="#'"/>
	</general>
</language>

<!-- kate: space-indent off; indent-width 4; -->
