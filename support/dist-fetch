#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

# Retrieve third-party files

source ./support/build-scripts/dist-versions || die

rm -rf ./build-temp/distfiles/
mkdir -p ./build-temp/distfiles/

rm -rf ./build-temp/build
mkdir -p ./build-temp/build

dist() {
    echo "Copying distfile: $1"
    rsync -a --checksum /usr/portage/distfiles/"$1" ./build-temp/distfiles/ &>/dev/null
    rsync -a --checksum ./build-temp/distfiles/"$1" ./build-temp/unpacked/ &>/dev/null
}

dist emscripten-"$myEmscriptenCommit".tar.gz
dist binaryen-"$myBinaryenVersion".tar.gz
dist binaryen-"$myBinaryenVersion".zip
#dist llvm-project-"$myLlvmCommit".tar.gz
# wabt and its build-time dependencies
dist wabt-"$myWabtVersion".tar.gz
dist googletest-"$myGoogletestVersion".tar.gz
dist python-lex-yacc-"$myPlyVersion".tar.gz
dist WebAssembly-testsuite-"$myTestsuiteCommit".tar.gz

(
cd ./build-temp/unpacked || die

#echo "Unpacking LLVM"
#tar xozf ./llvm-project-"$myLlvmCommit".tar.gz

echo "Unpacking Binaryen"
tar xozf ./binaryen-"$myBinaryenVersion".tar.gz
rm ./binaryen-"$myBinaryenVersion".tar.gz
# Leave the .zip version alone; that's for pretending to be the Emscripten port system

echo "Unpacking Emscripten"
tar xozf ./emscripten-"$myEmscriptenCommit".tar.gz
rm ./emscripten-"$myEmscriptenCommit".tar.gz
rm -r ./emscripten-"$myEmscriptenCommit"/tools/node_modules
rm -r ./emscripten-"$myEmscriptenCommit"/tools/eliminator
rm -r ./emscripten-"$myEmscriptenCommit"/third_party/closure-compiler
rm -r ./emscripten-"$myEmscriptenCommit"/third_party/html-minifier
rm -r ./emscripten-"$myEmscriptenCommit"/third_party/ply
rm -r ./emscripten-"$myEmscriptenCommit"/third_party/websockify
rm ./emscripten-"$myEmscriptenCommit"/third_party/lzma.js/lzma-full.js
rm ./emscripten-"$myEmscriptenCommit"/third_party/lzma.js/lzma-decoder.js

echo "Unpacking wabt dependencies"
tar xozf ./googletest-"$myGoogletestVersion".tar.gz
rm ./googletest-"$myGoogletestVersion".tar.gz
tar xozf ./python-lex-yacc-"$myPlyVersion".tar.gz
rm ./python-lex-yacc-"$myPlyVersion".tar.gz
tar xozf ./WebAssembly-testsuite-"$myTestsuiteCommit".tar.gz
rm WebAssembly-testsuite-"$myTestsuiteCommit".tar.gz

echo "Unpacking wabt"
tar xozf ./wabt-"$myWabtVersion".tar.gz
rm ./wabt-"$myWabtVersion".tar.gz
rm -r ./wabt-"$myWabtVersion"/src/prebuilt
rm -r ./wabt-"$myWabtVersion"/third_party
rm -r ./wabt-"$myWabtVersion"/demo/third_party
rm ./wabt-"$myWabtVersion"/demo/libwabt.js
)

./support/dist-build
