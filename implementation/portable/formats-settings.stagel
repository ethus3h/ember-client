r/s/getSettingForFormat s/format s/direction s/settingKey
    # s/direction can be "in" for import settings or "out" for export settings.
    new as/temp
    set as/temp getSettingsForFormat s/format s/direction
    new s/res
    if contains as/temp s/settingKey
        set s/res getNext as/temp indexOf as/temp s/settingKey
    else
        set s/res ''
    return s/res

r/as/getSettingsForFormat s/format s/direction
    # Returns an array of setting key/value pairs. A format setting string looks like, which should be fairly parseable (keys and vals follow StageL ident naming rules): key1:val1,key2:val2,
    new n/formatId
    set n/formatId getFormatId s/format
    new as/res
    if eq s/direction 'in'
        set as/res settingStringToArray getImportSettings n/formatId
    else
        set as/res settingStringToArray getExportSettings n/formatId
    return as/res

r/as/settingStringToArray s/settings
    new as/res
    set n/count len s/settings
    new n/counter
    set n/counter 0
    new s/elem
    new s/state
    set s/state 'key'
    new s/char
    while lt n/counter n/count
        set s/char charAt s/settings n/counter
        if eq s/state 'key'
            if eq s/char ':'
                set as/res push as/res s/elem
                set s/elem ''
                set s/state 'val'
            else
                set s/elem cat s/elem s/char
        else
            if eq s/char ','
                set as/res push as/res s/elem
                set s/elem ''
                set s/state 'key'
            else
                set s/elem cat s/elem s/char
        set n/counter add n/counter 1
    return as/res

r/s/settingArrayToString as/settings
    new s/res
    set n/count count as/settings
    new n/counter
    set n/counter 0
    new s/elem
    while lt n/counter n/count
        set s/elem get as/settings n/counter
        assertIsTrue isValidIdent s/elem
        if eq 0 mod n/counter 2
            set s/res cat s/res cat s/elem ','
        else
            set s/res cat s/res cat s/elem ':'
        set n/counter add n/counter 1
    return s/res
