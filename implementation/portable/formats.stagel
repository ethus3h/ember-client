r/an/dcaFromFormat s/inFormat an/contentBytes
    assertIsSupportedInputFormat s/inFormat
    assertIsByteArray an/contentBytes
    new an/ret
    if or eq s/inFormat 'sems' } eq s/inFormat 'integerList'
        # TODO: The sems parser can handle integerList format too, but perhaps a dedicated parser should be provided so it isn't too permissive.
        set an/ret dcaFromSems an/contentBytes
    else
        error cat 'Unimplemented document parsing format: ' s/inFormat
    assertIsDcArray an/ret
    return an/ret

r/an/dcaToFormat s/outFormat an/dcArrayIn
    assertIsSupportedOutputFormat s/outFormat
    assertIsDcArray an/dcArrayIn
    new an/res
    if eq s/outFormat 'integerList'
        set an/res dcaToIntegerList an/dcArrayIn
    elif eq s/outFormat 'immutableCharacterCells'
        set an/res dcaToImmutableCharacterCells an/dcArrayIn
    elif eq s/outFormat 'HTML'
        set an/res dcaToHTML an/dcArrayIn
    else
        die cat 'Unimplemented document render output format: ' s/outFormat
    assertIsByteArray an/res
    return an/res

r/an/convertFormats s/inFormat s/outFormat an/in
    assertIsSupportedInputFormat s/inFormat
    assertIsSupportedOutputFormat s/outFormat
    assertIsByteArray an/in
    new an/out
    set an/out dcaToFormat s/outFormat dcaFromFormat s/inFormat an/in
    assertIsByteArray an/out
    return an/out

r/s/formatToExtension s/format
    if eq s/format 'sems'
        return 'sems'
    elif eq s/format 'integerList'
        return 'dcil'
    elif eq s/format 'ASCII-safe-subset'
        return 'ascii'
    elif eq s/format 'UTF-8'
        return 'utf8'
    elif or eq s/format 'characterCells' } eq s/format 'immutableCharacterCells'
        new s/res
        set s/res cat formatToExtension getEnvCharEncoding } } '.txt'
        return s/res
    elif eq s/format 'HTML'
        new s/res
        set s/res cat formatToExtension getEnvCharEncoding } } '.htm'
        return s/res
    else
        die cat 'Format not supported: ' s/format

r/as/listInputFormats
    new as/res
    set as/res [ 'ascii' 'integerList' 'sems' ]
    return as/res

r/b/isSupportedInputFormat s/in
    new b/res
    set b/res contains listInputFormats } s/in
    return b/res

r/as/listOutputFormats
    new as/res
    set as/res [ 'HTML' 'integerList' 'immutableCharacterCells' ] # 'characterCells' and 'sems' not yet implemented
    return as/res

r/b/isSupportedOutputFormat s/in
    new b/res
    set b/res contains listOutputFormats } s/in
    return b/res

r/as/listEnvironmentCharEncodings
    new as/res
    set as/res [ 'ASCII-safe-subset' 'UTF-8' ]
    return as/res

r/b/isSupportedEnvironmentCharEncoding s/in
    new b/res
    set b/res contains listEnvironmentCharEncodings } s/in
    return b/res

r/an/dcToFormat s/outFormat n/dc
    # Output byte array for a single dc, or an empty array if no output is available. Only operates on one Dc at a time. Some formats may not need this; calling with them is an error and should cause an assertion failure.
    assertIsSupportedOutputFormat s/outFormat
    assertIsDc n/dc
    new an/res
    if or eq s/outFormat 'UTF-8' } eq s/outFormat 'ASCII-safe-subset'
        set an/res push an/res utf8BytesFromDecimalChar hexToDec dcDataLookupByValue 'mappings/from/unicode' 1 n/dc 0
    elif eq s/outFormat 'HTML'
        set s/res dcDataLookupByValue 'mappings/from/unicode' 1 n/dc 0
        if isBaseStr s/res 16
            set an/res push an/res utf8BytesFromDecimalChar hexToDec s/res
        else
            set an/res push an/res strToByteArray dcDataLookupByValue 'mappings/to/html' 0 n/dc 1
    else
        error cat 'Unimplemented character output format: ' s/outFormat
    # Returns an empty array if the Dc isn't printable. I don't think it should be an error to call this for a nonprintable Dc.
    assertIsByteArray an/res
    return an/res

r/an/dcFromFormat s/inFormat an/contentBytes
    # Retrieve dc corresponding to the input byte array, or an empty array if no match. Only operates on one Dc at a time. Some formats (e.g. sems) don't need this; calling with them is an error and should cause an assertion failure.
    assertIsSupportedInputFormat s/inFormat
    assertIsByteArray an/contentBytes
    new an/ret
    new n/dc
    if or eq s/inFormat 'ascii' } eq s/inFormat 'unicode'
        new n/sum
        set n/sum sumArray an/contentBytes
        if eq s/inFormat 'ascii'
            if not isAsciiByte n/sum
                die cat 'The character number ' cat strFrom n/sum } ' is not a 7-bit ASCII character.'
        if not isUnicodeCharacter n/sum
            die cat 'The character number ' cat strFrom n/sum } ' is not a Unicode character.'
        set n/dc intFromIntStr dcDataLookupById 'mappings/from/unicode' n/sum } 1
    else
        die cat 'Unimplemented character source format: ' s/inFormat
    set an/ret setElement an/ret 0 n/dc
    assertIsDcArray an/ret
    return an/ret
