r/b/runTest b/v b/testReturn
    set n/totalTests add n/totalTests 1
    if b/testReturn
        if b/v
            set an/frameBuffer append an/frameBuffer prepareStrForEcho cat 'Test #' cat strFrom n/totalTests } ' passed.'
        set n/passedTests add n/passedTests 1
    else
        if b/v
            set an/frameBuffer append an/frameBuffer prepareStrForEcho cat 'Test #' cat strFrom n/totalTests } ' failed.'
        set n/failedTests add n/failedTests 1
    if b/v
        set an/testFrameBuffer append an/testFrameBuffer an/frameBuffer
        renderDrawContents an/frameBuffer
    return b/testReturn

r/b/runTestNamed b/v s/testName b/testReturn
    set n/totalTests add n/totalTests 1
    if b/testReturn
        if b/v
            set an/frameBuffer append an/frameBuffer prepareStrForEcho cat 'Test #' cat strFrom n/totalTests } cat s/testName ' passed.'
        set n/passedTests add n/passedTests 1
    else
        if b/v
            set an/frameBuffer append an/frameBuffer prepareStrForEcho cat 'Test #' cat strFrom n/totalTests } cat s/testName ' failed.'
        set n/failedTests add n/failedTests 1
    if b/v
        renderDrawContents an/frameBuffer
    return b/testReturn

r/v/clearTestStats
    set n/totalTests 0
    set n/passedTests 0
    set n/failedTests 0

r/b/runTestsOnly b/v
    # Run tests without report. b/v=verbose: true=print test result lines; false=return value only
    # This runs each component's test suite
    #runTestsBits b/v
    runTestsMath b/v
    # Did anything fail?
    if eq n/failedTests 0
        return true
    return false

r/b/reportTests
    new s/passedWord
    set s/passedWord 'tests'
    if eq n/passedTests 1
        set s/passedWord 'test'
    new s/failedWord
    set s/failedWord 'tests'
    if eq n/failedTests 1
        set s/failedWord 'test'
    new s/totalWord
    set s/totalWord 'tests'
    if eq n/totalTests 1
        set s/totalWord 'test'
    new n/passedPercentageN
    set n/passedPercentageN mul div mul n/passedTests 100000 } n/failedTests } 100
    new s/passedPercentageTemp
    set s/passedPercentageTemp strFrom n/passedPercentageN
    new n/count
    set n/count len s/passedPercentageTemp
    new n/counter
    set n/counter n/count
    new s/passedPercentage
    while gt n/counter 0
        if eq n/counter sub n/count 3
            set s/passedPercentage cat s/passedPercentage '.'
        set s/passedPercentage cat s/passedPercentage strChar s/passedPercentageTemp sub n/count n/counter
        set n/counter sub n/counter 1
    new n/failedPercentageN
    set n/failedPercentageN mul div mul n/failedTests 100000 } n/passedTests } 100
    new s/failedPercentageTemp
    set s/failedPercentageTemp strFrom n/failedPercentageN
    set n/count len s/failedPercentageTemp
    set n/counter n/count
    new s/failedPercentage
    while gt n/counter 0
        if eq n/counter sub n/count 3
            set s/failedPercentage cat s/failedPercentage '.'
        set s/failedPercentage cat s/failedPercentage strChar s/failedPercentageTemp sub n/count n/counter
        set n/counter sub n/counter 1
    set an/testFrameBuffer append an/testFrameBuffer prepareStrForEcho cat strFrom n/passedTests } cat ' ' cat s/passedWord cat ' (' cat s/passedPercentage cat '%) passed and ' cat strFrom n/failedTests } cat ' ' cat s/failedWord cat ' (' cat s/failedPercentage cat '%) failed out of a total of ' cat strFrom n/totalTests } cat ' ' cat s/totalWord '.'
    new s/temp
    if ne n/failedTests 0
        set s/totalWord 'Some tests'
        if eq n/totalTests 1
            set s/totalWord 'A test'
        set s/temp cat s/totalWord cat ' (' cat s/failedPercentage cat '%: ' cat strFrom n/failedTests } cat ' out of ' cat strFrom n/totalTests } ') failed!'
        set an/testFrameBuffer append an/testFrameBuffer prepareStrForEcho s/temp
        #error s/temp
    if ne n/passedTests sub n/totalTests n/failedTests
        die 'There is a problem in the testing framework.'
    renderDrawContents an/testFrameBuffer
    set an/testFrameBuffer ( )
    new b/testReturn
    set b/testReturn true
    if ne n/failedTests 0
        set b/testReturn false
        #die s/temp
    return b/testReturn
