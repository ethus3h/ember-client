r/an/prepareStrForEcho s/in
    new an/res
    set an/res convertFormats 'ascii' getEnvPreferredFormat push strToByteArray s/in } ( 13 10 )
    return an/res

r/b/runTestTrue s/testName b/testReturn
    set n/totalTests add n/totalTests 1
    if b/testReturn
        set an/frameBuffer push an/frameBuffer prepareStrForEcho cat 'Test ' cat s/testName ' passed.'
        set n/passedTests add n/passedTests 1
    else
        set an/frameBuffer push an/frameBuffer prepareStrForEcho cat 'Test ' cat s/testName ' failed.'
        set n/failedTests add n/failedTests 1
    renderDrawContents an/frameBuffer
    return b/testReturn

r/b/reportTests
    new s/passedWord
    set s/passedWord 'tests'
    if eq n/passedTests 1
        set s/passedWord 'test'
    new s/failedWord
    set s/failedWord 'tests'
    if eq n/failedTests 1
        set s/failedWord 'test'
    new s/totalWord
    set s/totalWord 'tests'
    if eq n/totalTests 1
        set s/totalWord 'test'
    new n/passedPercentageN
    set n/passedPercentageN mul div mul n/passedTests 100000 } n/failedTests } 100
    new s/passedPercentageTemp
    set s/passedPercentageTemp strFrom n/passedPercentageN
    new n/count
    set n/count len s/passedPercentageTemp
    new n/counter
    set n/counter n/count
    new s/passedPercentage
    while gt n/counter 0
        if eq n/counter sub n/count 3
            set s/passedPercentage cat s/passedPercentage '.'
        set s/passedPercentage cat s/passedPercentage strChar s/passedPercentageTemp sub n/count n/counter
        set n/counter sub n/counter 1
    new n/failedPercentageN
    set n/failedPercentageN mul div mul n/failedTests 100000 } n/passedTests } 100
    new s/failedPercentageTemp
    set s/failedPercentageTemp strFrom n/failedPercentageN
    set n/count len s/failedPercentageTemp
    set n/counter n/count
    new s/failedPercentage
    while gt n/counter 0
        if eq n/counter sub n/count 3
            set s/failedPercentage cat s/failedPercentage '.'
        set s/failedPercentage cat s/failedPercentage strChar s/failedPercentageTemp sub n/count n/counter
        set n/counter sub n/counter 1
    set an/frameBuffer push an/frameBuffer prepareStrForEcho cat 'Test ' cat s/testName ' passed.'
    else
        set an/frameBuffer push an/frameBuffer prepareStrForEcho cat strFrom n/passedTests } cat ' ' cat s/passedWord cat ' (' cat s/passedPercentage cat '%) passed and ' cat strFrom n/failedTests } cat ' ' cat s/failedWord cat ' (' cat s/failedPercentage cat '%) failed out of a total of ' cat strFrom n/totalTests } cat s/totalWord '.'
    if 
    renderDrawContents an/frameBuffer
    set an/frameBuffer ( )
    return b/testReturn

        passedPercentage="$(printf "%.3f\\n" "$(bc -l <<< "($passedTests / $totalTests) * 100")")"
        failedPercentage="$(printf "%.3f\\n" "$(bc -l <<< "($failedTests / $totalTests) * 100")")"
        echo "$passedTests $passedWord ($passedPercentage%) passed and $failedTests $failedWord ($failedPercentage%) failed out of a total of $totalTests $totalWord."
        if [[ "$failedTests" != "0" ]]; then
            totalWord="Some tests"
            if [[ "$totalTests" == 1 ]]; then
                totalWord="A test"
            fi
            error-notify "$totalWord ($failedPercentage%: $failedTests out of $totalTests) failed!"
        fi
        [[ $(( totalTests - failedTests )) == "$passedTests" ]] || die "There's a problem in the testing framework."
    }
}


#async function implRunEiteTest(strTestFormat, strTestName) {
#    // TODO: Unfinished implementation
#    strTestUrlPrefix="../tests/" + strTestName + "." + strTestFormat + "/";
#    strTestInputFormatUrl="../tests/" + strTestName + "." + strTestFormat + "/in-format";
#    switch (strTestFormat) {
#        case "ept": // Parser test
#            await implUrlLoadForCallback(strTestInputFormatUrl, async function(bytearrayContent) {});
#            break;
#        default:
#            await implError("Unimplemented test format: " + strTestFormat);
#            break;
#    }
#}
