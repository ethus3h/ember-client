# This file contains the public interface for EITE.

# If you just want to run EITE, use the following function.

r/v/startEite
    # Start EITE, using the default startup document. Does not return while EITE is still running.
    loadAndRun 'sems' 'eite.sems'


# If you want to run a different document, you can call loadAndRun with the format of the document to open and its location.

r/v/loadAndRun s/format s/path
    # Load and run the specified document. Does not return while the document is still running.
    runDocument loadStoredDocument s/format s/path


# If you want to convert a document to another format, you can call loadAndConvert with the format of the document, its location, and the format you want the results in.

r/an/loadAndConvert s/inputFormat s/outputFormat s/path
    # Load the specified document, and return it converted to the specified outputFormat as an array of bytes.
    new an/out
    set an/out exportDocument s/outputFormat loadStoredDocument s/inputFormat s/path }


# To operate on a document you already have as a Dc array, you can call runDocument or convertDocument directly on it. Or, if you already have it as a byte array, you can call importDocument or importAndExport on it.

r/v/runDocument an/contents
    # Run the specified document. Does not return while the document is still running. Takes care of events and I/O automatically.
    setupIfNeeded
    assertIsDcArray an/contents
    new n/execId
    set n/execId startDocument an/contents
    internalRunDocument n/execId

r/v/runDocumentPrep an/contents
    # Prepare to run the specified document.
    setupIfNeeded
    assertIsDcArray an/contents
    new n/execId
    set n/execId startDocument an/contents
    internalRunDocument n/execId

r/an/exportDocument s/format an/contents
    assertIsSupportedOutputFormat s/format
    # Convert a document stored as an array of dcs to the specified format, and return it as an array of bytes.
    setupIfNeeded
    new an/out
    set an/out dcaToFormat s/format an/contents
    return an/out

r/an/importDocument s/format an/contents
    assertIsSupportedInputFormat s/format
    # Convert a document stored as an array of bytes in the specified format, and return it as an array of dc.
    setupIfNeeded
    new an/out
    set an/out dcaFromFormat s/format an/contents
    return an/out

r/an/importAndExport s/inputFormat s/outputFormat an/contents
    setupIfNeeded
    assertIsSupportedInputFormat s/inputFormat
    assertIsSupportedOutputFormat s/outputFormat
    # Convert a document stored as an array of bytes in the specified input format, and return it as an array of bytes in the specified output format.
    new an/out
    set an/out convertFormats s/inputFormat s/outputFormat an/contents
    return an/out


# If you want more control over the document loading and execution, you can use these lower-level functions.

r/an/loadStoredDocument s/format s/path
    setupIfNeeded
    assertIsSupportedInputFormat s/format
    # Load and return the specified document as a Dc array.
    new an/res
    set an/res dcaFromFormat s/format getFileFromPath s/path
    return an/res

r/n/startDocument an/contents
    # Start execution of the provided document and return an ID for it.
    setupIfNeeded
    new n/execId
    set n/execId prepareDocumentExec an/contents
    return n/execId

r/as/getDesiredEventNotifications n/execId
    # Return list of event types (e.g. keystrokes, mouse movement, elapsed time) that the document wants to be notified of.
    new as/res
    return as/res

r/an/sendEvent n/execId an/eventData
    # Send the provided event or events data to the specified document.

r/an/getDocumentFrame n/execId s/format
    assertIsSupportedOutputFormat s/format
    # Return the most recently available output for the given document in the requested format.


# To run the tests, you can use runTests or runPrintTests.

r/b/runTests
    # Returns true if all tests pass; false otherwise. Displays a report of the tests.
    setupIfNeeded
    clearTestStats
    runTestsOnly true
    reportTests
    if eq n/failedTests 0
        return true
    return false

r/b/quietRunTests
    # Returns true if all tests pass; false otherwise.
    setupIfNeeded
    new b/res
    set b/res runTestsOnly false
    return b/res
