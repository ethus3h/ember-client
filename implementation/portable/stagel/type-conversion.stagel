r/s/strPrintArr ga/input
    # Hint: running this on a DcArray produces a sems document that can be turned back into a DcArray with dcarrParseSems strToByteArray s/str :)
    new n/count
    set n/count count ga/input
    new n/i
    set n/i 0
    new s/out
    while lt n/i n/count
        set s/out cat s/out strFrom get ga/input n/i
        set s/out cat s/out ' '
        set n/i add n/i 1
    return s/out

r/s/printArray ga/in
    # Just a convenience wrapper
    new s/res
    set s/res strPrintArr ga/in
    return s/res

r/s/strPrintArray ga/in
    # Just a convenience wrapper
    new s/res
    set s/res strPrintArr ga/in
    return s/res

r/s/printArr ga/in
    # Just a convenience wrapper
    new s/res
    set s/res strPrintArr ga/in
    return s/res

r/an/intArrFromStrPrintedArr ga/input
r/an/dcaFromIntegerList an/content
    assertIsByteArray an/content
    new an/ret

    # Reverse of strPrintArr with an an/ parameter.

    new s/currentDc
    set s/currentDc ''
    new n/contentLength
    set n/contentLength count an/content
    new n/byteOffset
    new n/currentByte
    while lt n/byteOffset n/contentLength
        # do something with each byte in the array. an/content[n/byteOffset] holds the decimal value of the given byte. These are Dcs encoded as ASCII text bytes, rather than an array of Dcs.
        set n/currentByte get an/content n/byteOffset
        if asciiIsDigit n/currentByte
            set s/currentDc cat s/currentDc charFromByte n/currentByte
        elif asciiIsSpace n/currentByte
            set an/ret push an/ret intFromIntStr s/currentDc
            set s/currentDc ''
        else
            die 'Unexpected parser state in integerList document.'
        set n/byteOffset add n/byteOffset 1
    if ne 0 len s/currentDc
        # Ended without a trailing space
        if eq 'true' getSettingForFormat 'integerList' 'in' 'strict'
            die 'No trailing space present in integerList format while importing. This is not allowed in strict mode.'
        set an/ret push an/ret intFromIntStr s/currentDc
    assertIsDcArray an/ret
    return an/ret

r/s/charFromHexByte s/hexByte
    # Bear in mind that StageL doesn't attempt to support Unicode.
    assertIsBaseStr s/hexByte 16
    new s/res
    set s/res charFromByte intFromBaseStr s/hexByte 16
    return s/res

r/an/strToByteArray s/input
    new n/count
    set n/count len s/input
    new n/i
    set n/i 0
    new an/out
    while lt n/i n/count
        set an/out push an/out byteFromChar strChar s/input n/i
        set n/i add n/i 1
    return an/out

r/s/strFromByteArray an/input
    # Remember this will break if there are non-string bytes in it.
    new n/count
    set n/count count an/input
    new n/i
    set n/i 0
    new s/out
    while lt n/i n/count
        set s/out cat s/out charFromByte get an/input n/i
        set n/i add n/i 1
    return s/out
