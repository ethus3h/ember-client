r/s/strPrintArr ga/input
    # Hint: running this on a DcArray produces a sems document that can be turned back into a DcArray with dcarrParseSems strToByteArray s/str :)
    new n/count
    set n/count count ga/input
    new n/i
    set n/i 0
    new s/out
    while lt n/i n/count
        set s/out cat s/out strFrom get ga/input n/i
        set s/out cat s/out ' '
        set n/i add n/i 1
    return s/out

r/s/printArray ga/in
    # Just a convenience wrapper
    new s/res
    set s/res strPrintArr ga/in
    return s/res

r/s/printArr ga/in
    # Just a convenience wrapper
    new s/res
    set s/res strPrintArr ga/in
    return s/res

r/s/charFromHexByte s/hexByte
    # Bear in mind that StageL doesn't attempt to support Unicode.
    assertIsBaseStr s/hexByte 16
    new s/res
    set s/res charFromByte intFromBaseStr s/hexByte 16
    return s/res

r/an/strToByteArray s/input
    new n/count
    set n/count len s/input
    new n/i
    set n/i 0
    new an/out
    while lt n/i n/count
        set an/out push an/out byteFromChar strChar s/input n/i
        set n/i add n/i 1
    return an/out

r/s/strFromByteArray an/input
    # Remember this will break if there are non-string bytes in it.
    new n/count
    set n/count count an/input
    new n/i
    set n/i 0
    new s/out
    while lt n/i n/count
        set s/out cat s/out charFromByte get an/input n/i
        set n/i add n/i 1
    return s/out

r/an/byteToIntBitArray n/in
    

r/an/byteArrayToIntBitArray an/in
    assertIsByteArray an/in
    new an/res
    new n/len
    new n/i
    new n/currentByte
    new an/currentBits
    while lt n/i n/len
        set currentBits 
        set an/res push an/res byteToIntBitArray get an/in n/i
        set an/currentBits []
        set n/i add n/i 1


r/an/byteArrayToBase17bUtf8 an/in
    assertIsByteArray an/in
    new an/res
    set an/res eiteHostCall 'internalIntBitArrayToBase17bString' an/in
    return an/res

r/an/byteArrayFromBase17bUtf8 an/in
    assertIsByteArray an/in
    new an/temp
    new n/len
    new n/i
    while lt n/i n/len
        
    let intBitArrayTemp = [];
    let intLen=intArrayInput.length
    while(i<) {
        
    }
    byteArrayRes = await eiteHostCall('internalIntBitArrayFromBase17bString', intBitArrayTemp);

    await assertIsByteArray(byteArrayRes); return byteArrayRes;
}
