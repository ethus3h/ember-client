r/an/dcaToUtf8 an/content
    assertIsDcArray an/content
    new an/res
    new n/l
    set n/l count an/content
    new n/c
    set n/c 0
    new an/temp
    new n/dcAtIndex
    new an/unmappables
    new n/unmappablesCount
    new n/unmappablesCounter
    new an/unmappablesIntermediatePacked
    new b/foundAnyUnmappables
    set b/foundAnyUnmappables false
    new as/variantSettings
    set as/variantSettings utf8VariantSettings 'out'
    new b/dcBasenbEnabled
    set b/dcBasenbEnabled contains as/variantSettings 'dcBasenb'
    new b/dcBasenbFragmentEnabled
    set b/dcBasenbFragmentEnabled contains as/variantSettings 'dcBasenbFragment'
    while le n/c n/l
        # Start by getting the character's UTF8 equivalent and putting it in an/temp. This might be empty, if the character can't be mapped to UTF8.
        if lt n/c n/l
            set n/dcAtIndex get an/content n/c
            set an/temp dcToFormat 'utf8' n/dcAtIndex
        # Could the character be mapped? If not, stick it in the unmappables array or warn as appropriate.
        if eq 0 count an/temp
            if lt n/c n/l
                if b/dcBasenbEnabled
                    set an/unmappables push an/unmappables n/dcAtIndex
                else
                    exportWarningUnmappable n/c n/dcAtIndex
        # If we've reached the end of the input string or the last character was mappable, convert the an/unmappables array to PUA characters and append that result to the output string
        if b/dcBasenbEnabled
            if or eq n/c n/l } ne 0 count an/temp
                set n/unmappablesCount count an/unmappables
                if ne 0 n/unmappablesCount
                    if not b/foundAnyUnmappables
                        if not b/dcBasenbFragmentEnabled
                            set an/res append an/res getArmoredUtf8EmbeddedStartUuid
                    set b/foundAnyUnmappables true
                    # We've gotten to the end of a string of unmappable characters, so convert them to PUA characters
                    set n/unmappablesCounter 0
                    while lt n/unmappablesCounter n/unmappablesCount
                        # The packing method for this works basically like UTF8, where each character is mapped to a series of bytes. So, first get the bytearray for the character we're on. Each character should be packed separately, to make it easy to spot where one character ends and the next begins.
                        set an/unmappablesIntermediatePacked append an/unmappablesIntermediatePacked pack32 get an/unmappables n/unmappablesCounter
                        set n/unmappablesCounter add n/unmappablesCounter 1
                        set an/res append an/res byteArrayToBase17bUtf8 an/unmappablesIntermediatePacked
                        set an/unmappablesIntermediatePacked ( )
                    set an/unmappables ( )
                    set an/unmappablesIntermediatePacked ( )
        # Stick the current character onto the result array
        if lt n/c n/l
            set an/res append an/res an/temp
        # and finally increment the loop counter
        set n/c add n/c 1
    if and b/dcBasenbEnabled b/foundAnyUnmappables
        if not b/dcBasenbFragmentEnabled
            set an/res append an/res getArmoredUtf8EmbeddedEndUuid
    assertIsByteArray an/res
    return an/res

r/an/dcaFromUtf8 an/content
    new an/res
    new an/remaining
    set an/remaining an/content
    new an/temp
    new an/latestChar
    new n/dcBasenbUuidMonitorState
    set n/dcBasenbUuidMonitorState 0
    new n/dcBasenbUuidMonitorReprocessNeededCount
    set n/dcBasenbUuidMonitorReprocessNeededCount 0
    new as/variantSettings
    set as/variantSettings utf8VariantSettings 'in'
    new b/dcBasenbEnabled
    set b/dcBasenbEnabled contains as/variantSettings 'dcBasenb'
    new b/inDcBasenbSection
    set b/inDcBasenbSection false
    if b/dcBasenbEnabled
        set b/inDcBasenbSection contains as/variantSettings 'dcBasenbFragment'
    new n/skipThisChar
    set n/skipThisChar 0
    new an/collectedDcBasenbChars
    new n/collectedDcBasenbCharsCount
    new n/collectedDcBasenbCharsCounter
    new an/currentUnmappableChar
    new n/tempArrayCount
    while not eq 0 count an/remaining
        set an/temp ( )
        set an/latestChar pack32 firstCharOfUtf8String an/remaining
        if b/dcBasenbEnabled
            # Dcbasenb is enabled, so process characters accordingly.
            if not b/inDcBasenbSection
                # Not in a dcbasenb section, so look out for the UUID in case we run into one
                # All this code down to "(End of code section)" is only looking for UUIDs, and can mostly be disregarded for purposes of understanding the decoder logic.
                # 8 characters for uuid. Probably a better way to do this but oh well. Got them with new TextEncoder().encode('[char]'); etc.
                if ne 0 n/dcBasenbUuidMonitorReprocessNeededCount
                    # We're reprocessing potential UUID chars that didn't match a UUID after all, so don't check them for being a UUID. FIXME: Non-UUID char being reprocessed followed by 244 141 129 157 etc. (a potential UUID) would NOT be checked to be a UUID here. It should handle correctly the situation where there's potential but not a UUID, followed by potential and is a UUID, overlapping, like that.
                    set n/dcBasenbUuidMonitorReprocessNeededCount sub n/dcBasenbUuidMonitorReprocessNeededCount 1
                else
                    # Check for a UUID.
                    if eq n/dcBasenbUuidMonitorState 0
                        if arrEq an/latestChar ( 244 141 129 157 )
                            set n/dcBasenbUuidMonitorState 1
                    elif eq n/dcBasenbUuidMonitorState 1
                        if arrEq an/latestChar ( 244 139 182 128 )
                            set n/dcBasenbUuidMonitorState 2
                        else
                            set n/dcBasenbUuidMonitorReprocessNeededCount n/dcBasenbUuidMonitorState
                            set n/dcBasenbUuidMonitorState 0
                    elif eq n/dcBasenbUuidMonitorState 2
                        if arrEq an/latestChar ( 243 188 183 162 )
                            set n/dcBasenbUuidMonitorState 3
                        else
                            set n/dcBasenbUuidMonitorReprocessNeededCount n/dcBasenbUuidMonitorState
                            set n/dcBasenbUuidMonitorState 0
                    elif eq n/dcBasenbUuidMonitorState 3
                        if arrEq an/latestChar ( 243 186 128 138 )
                            set n/dcBasenbUuidMonitorState 4
                        else
                            set n/dcBasenbUuidMonitorReprocessNeededCount n/dcBasenbUuidMonitorState
                            set n/dcBasenbUuidMonitorState 0
                    elif eq n/dcBasenbUuidMonitorState 4
                        if arrEq an/latestChar ( 243 184 165 142 )
                            set n/dcBasenbUuidMonitorState 5
                        else
                            set n/dcBasenbUuidMonitorReprocessNeededCount n/dcBasenbUuidMonitorState
                            set n/dcBasenbUuidMonitorState 0
                    elif eq n/dcBasenbUuidMonitorState 5
                        if arrEq an/latestChar ( 244 136 186 141 )
                            set n/dcBasenbUuidMonitorState 6
                        else
                            set n/dcBasenbUuidMonitorReprocessNeededCount n/dcBasenbUuidMonitorState
                            set n/dcBasenbUuidMonitorState 0
                    elif eq n/dcBasenbUuidMonitorState 6
                        if arrEq an/latestChar ( 243 178 139 160 )
                            set n/dcBasenbUuidMonitorState 7
                        else
                            set n/dcBasenbUuidMonitorReprocessNeededCount n/dcBasenbUuidMonitorState
                            set n/dcBasenbUuidMonitorState 0
                    elif eq n/dcBasenbUuidMonitorState 7
                        if arrEq an/latestChar ( 244 143 186 144 )
                            set n/dcBasenbUuidMonitorState 0
                            set an/latestChar ( )
                            set b/inDcBasenbSection true
                        else
                            set n/dcBasenbUuidMonitorReprocessNeededCount n/dcBasenbUuidMonitorState
                            set n/dcBasenbUuidMonitorState 0
                    if ne 0 n/dcBasenbUuidMonitorReprocessNeededCount
                        # It's necessary to reprocess the number of bytes that were consumed while checking for a UUID
                        set n/tempArrayCount sub count an/content } count an/remaining
                        set an/remaining anSubset an/content n/tempArrayCount add n/tempArrayCount mul 4 n/dcBasenbUuidMonitorReprocessNeededCount
            else
                # Dcbasenb support is enabled, and we're inside a dcbasenb region. Process chars accordingly.
                if ne 0 n/dcBasenbUuidMonitorReprocessNeededCount
                    # Reprocessing non-UUID chars that could have been a UUID. Again, FIXME same as for the start UUID reprocessing bug mentioned in the earlier FIXME.
                    set n/dcBasenbUuidMonitorReprocessNeededCount sub n/dcBasenbUuidMonitorReprocessNeededCount 1
                else
                    # Look for a dcbasenb region end UUID.
                    if eq n/dcBasenbUuidMonitorState 0
                        if arrEq an/latestChar ( 243 188 133 185 )
                            set n/dcBasenbUuidMonitorState 1
                    elif eq n/dcBasenbUuidMonitorState 1
                        if arrEq an/latestChar ( 243 180 182 175 )
                            set n/dcBasenbUuidMonitorState 2
                        else
                            set n/dcBasenbUuidMonitorReprocessNeededCount n/dcBasenbUuidMonitorState
                            set n/dcBasenbUuidMonitorState 0
                    elif eq n/dcBasenbUuidMonitorState 2
                        if arrEq an/latestChar ( 244 136 161 186 )
                            set n/dcBasenbUuidMonitorState 3
                        else
                            set n/dcBasenbUuidMonitorReprocessNeededCount n/dcBasenbUuidMonitorState
                            set n/dcBasenbUuidMonitorState 0
                    elif eq n/dcBasenbUuidMonitorState 3
                        if arrEq an/latestChar ( 243 191 148 138 )
                            set n/dcBasenbUuidMonitorState 4
                        else
                            set n/dcBasenbUuidMonitorReprocessNeededCount n/dcBasenbUuidMonitorState
                            set n/dcBasenbUuidMonitorState 0
                    elif eq n/dcBasenbUuidMonitorState 4
                        if arrEq an/latestChar ( 244 134 178 166 )
                            set n/dcBasenbUuidMonitorState 5
                        else
                            set n/dcBasenbUuidMonitorReprocessNeededCount n/dcBasenbUuidMonitorState
                            set n/dcBasenbUuidMonitorState 0
                    elif eq n/dcBasenbUuidMonitorState 5
                        if arrEq an/latestChar ( 244 141 184 130 )
                            set n/dcBasenbUuidMonitorState 6
                        else
                            set n/dcBasenbUuidMonitorReprocessNeededCount n/dcBasenbUuidMonitorState
                            set n/dcBasenbUuidMonitorState 0
                    elif eq n/dcBasenbUuidMonitorState 6
                        if arrEq an/latestChar ( 243 178 128 176 )
                            set n/dcBasenbUuidMonitorState 7
                        else
                            set n/dcBasenbUuidMonitorReprocessNeededCount n/dcBasenbUuidMonitorState
                            set n/dcBasenbUuidMonitorState 0
                    elif eq n/dcBasenbUuidMonitorState 7
                        if arrEq an/latestChar ( 244 143 188 157 )
                            set n/dcBasenbUuidMonitorState 0
                            set an/latestChar ( )
                            set b/inDcBasenbSection false
                            # Handle any remaining collected DcBasenb characters
                            if ne 0 count an/collectedDcBasenbChars
                                set an/collectedDcBasenbChars byteArrayFromBase17bUtf8 an/collectedDcBasenbChars
                                if excepArr an/collectedDcBasenbChars
                                    importWarning sub count an/content } count an/remaining } } 'An invalid base17b UTF8 input was encountered. Probably it was incorrectly truncated.'
                                    set an/collectedDcBasenbChars ( )
                                set n/collectedDcBasenbCharsCount count an/collectedDcBasenbChars
                                set n/collectedDcBasenbCharsCounter 0
                                while lt n/collectedDcBasenbCharsCounter n/collectedDcBasenbCharsCount
                                    set an/currentUnmappableChar utf8BytesFromDecimalChar firstCharOfUtf8String an/collectedDcBasenbChars
                                    set an/res append an/res unpack32 an/currentUnmappableChar
                                    set n/collectedDcBasenbCharsCounter add n/collectedDcBasenbCharsCounter count an/currentUnmappableChar
                                set an/collectedDcBasenbChars ( )
                        else
                            set n/dcBasenbUuidMonitorReprocessNeededCount n/dcBasenbUuidMonitorState
                            set n/dcBasenbUuidMonitorState 0
                    if ne 0 n/dcBasenbUuidMonitorReprocessNeededCount
                        # It's necessary to reprocess the number of bytes that were consumed while checking for a UUID
                        set n/tempArrayCount count an/remaining
                        set an/remaining anSubset an/content n/tempArrayCount add n/tempArrayCount mul 4 n/dcBasenbUuidMonitorReprocessNeededCount
                # (End of code section) (see explanation above)
            if eq 0 n/dcBasenbUuidMonitorState
                # Process the current character: if we're in a dcbasenb section, check if it is a dcbasenb character and collect it for decoding. Otherwise, decode the preceding run of dcbasenb chars as a chunk and append that to the result.
                if ne 0 count an/latestChar
                    # There is a latest char (latestChar has more than 0 elems), so work on it
                    if and b/inDcBasenbSection and isBasenbChar an/latestChar } not isBasenbDistinctRemainderChar an/latestChar
                        # The character is a dcbasenb char and we're in a dcbasenb section, so collect the character for decoding.
                        # Should decode each character as a single batch with the end of the run denoted by isBasenbDistinctRemainderChar, so don't match those here.
                        set an/collectedDcBasenbChars append an/collectedDcBasenbChars an/latestChar
                        set n/skipThisChar count an/latestChar
                    else
                        # Not a basenb char (or not in a dcbasenb section), so decode the ones we've collected, if there are any
                        if ne 0 count an/collectedDcBasenbChars
                            set an/collectedDcBasenbChars byteArrayFromBase17bUtf8 an/collectedDcBasenbChars
                            if excepArr an/collectedDcBasenbChars
                                importWarning sub count an/content } count an/remaining } } 'An invalid base17b UTF8 input was encountered. Probably it was incorrectly truncated.'
                                set an/collectedDcBasenbChars ( )
                            set n/collectedDcBasenbCharsCount count an/collectedDcBasenbChars
                            set n/collectedDcBasenbCharsCounter 0
                            while lt n/collectedDcBasenbCharsCounter n/collectedDcBasenbCharsCount
                                set an/currentUnmappableChar utf8BytesFromDecimalChar firstCharOfUtf8String an/collectedDcBasenbChars
                                set an/res append an/res unpack32 an/currentUnmappableChar
                                set n/collectedDcBasenbCharsCounter add n/collectedDcBasenbCharsCounter count an/currentUnmappableChar
                            set an/collectedDcBasenbChars ( )
                else
                    # The latest char was the last char of a confirmed UUID.
                    set n/skipThisChar 4
        set n/tempArrayCount count an/latestChar
        if eq 0 n/dcBasenbUuidMonitorState
            # (We're not trying to spot a UUID right now: either the current char couldn't be one, or we confirmed it's not part of one and are re-processing this char.)
            if ne 0 n/skipThisChar
                # The current character was a dcbasenb character, so it was stuck onto the collectedDcBasenbChars array and so we defer working on it until later. (Or, it was the last character of a confirmed UUID; either way, it doesn't get processed now.)
                set n/tempArrayCount n/skipThisChar
                set n/skipThisChar 0
            else
                # Not skipping the current char, so decode it from Unicode normally.
                set an/temp an/latestChar
                new an/tempFromUnicode
                set an/tempFromUnicode dcFromFormat 'unicode' an/temp
                if ne -1 get an/tempFromUnicode 0
                    set an/res append an/res an/tempFromUnicode
        # Place in an/remaining the substring of input that has not been processed yet.
        set an/remaining anSubset an/remaining n/tempArrayCount -1
    if b/dcBasenbEnabled
        # Handle any remaining collected DcBasenb characters
        if ne 0 count an/collectedDcBasenbChars
            set an/collectedDcBasenbChars byteArrayFromBase17bUtf8 an/collectedDcBasenbChars
            if excepArr an/collectedDcBasenbChars
                importWarning sub count an/content } count an/remaining } } 'An invalid base17b UTF8 input was encountered. Probably it was incorrectly truncated.'
                set an/collectedDcBasenbChars ( )
            set n/collectedDcBasenbCharsCount count an/collectedDcBasenbChars
            set n/collectedDcBasenbCharsCounter 0
            while lt n/collectedDcBasenbCharsCounter n/collectedDcBasenbCharsCount
                set an/currentUnmappableChar utf8BytesFromDecimalChar firstCharOfUtf8String an/collectedDcBasenbChars
                set an/res append an/res unpack32 an/currentUnmappableChar
                set n/collectedDcBasenbCharsCounter add n/collectedDcBasenbCharsCounter count an/currentUnmappableChar
    return an/res

r/as/utf8VariantSettings s/direction
    new as/res
    new s/enabledVariants
    set s/enabledVariants getSettingForFormat 'utf8' s/direction 'variants'
    # TODO: Support multiple variants enabled (chop up the value of the s/enabledVariants string into its constituent variants)
    if eq 'dcBasenb' s/enabledVariants
        set as/res push as/res s/enabledVariants
    elif eq 'dcBasenb dcBasenbFragment' s/enabledVariants
        set as/res push as/res [ 'dcBasenb' 'dcBasenbFragment' ]
    return as/res

r/an/dcaToDcbnbUtf8 an/content
    # convenience wrapper
    new an/res
    pushExportSettings getFormatId 'utf8' } 'variants:dcBasenb,'
    set an/res dcaToUtf8 an/content
    popExportSettings getFormatId 'utf8'
    return an/res

r/an/dcaFromDcbnbUtf8 an/content
    # convenience wrapper
    new an/res
    pushImportSettings getFormatId 'utf8' } 'variants:dcBasenb,'
    set an/res dcaFromUtf8 an/content
    popImportSettings getFormatId 'utf8'
    return an/res

r/an/dcaToDcbnbFragmentUtf8 an/content
    # convenience wrapper
    new an/res
    pushExportSettings getFormatId 'utf8' } 'variants:dcBasenb dcBasenbFragment,'
    set an/res dcaToUtf8 an/content
    popExportSettings getFormatId 'utf8'
    return an/res

r/an/dcaFromDcbnbFragmentUtf8 an/content
    # convenience wrapper
    new an/res
    pushImportSettings getFormatId 'utf8' } 'variants:dcBasenb dcBasenbFragment,'
    set an/res dcaFromUtf8 an/content
    popImportSettings getFormatId 'utf8'
    return an/res

r/an/dcbnbGetFirstChar an/in
    # Return the first character of a dcbnb string (doesn't do any conversion; returns dcbnb)
    new an/res
    if eq 0 count an/in
        return an/res
    new b/continue
    set b/continue true
    new an/nextUtf8
    new an/remaining
    set an/remaining an/in
    new n/tempArrayCount
    while b/continue
        set an/nextUtf8 pack32 firstCharOfUtf8String an/remaining
        if not isBasenbChar an/nextUtf8
            if eq 0 count an/res
                set an/res an/nextUtf8
            set b/continue false
        else
            set an/res append an/res an/nextUtf8
            if isBasenbDistinctRemainderChar an/nextUtf8
                set b/continue false
            else
                set n/tempArrayCount count an/nextUtf8
                set an/remaining anSubset an/remaining n/tempArrayCount -1
    return an/res

r/an/dcbnbGetLastChar an/in
    # Return the last character of a dcbnb string (doesn't do any conversion; returns dcbnb)
    new an/res
    if eq 0 count an/in
        return an/res
    new b/continue
    set b/continue true
    new an/nextUtf8
    new an/remaining
    set an/remaining an/in
    new n/tempArrayCount
    new b/pastFirstBasenbChar
    set b/pastFirstBasenbChar false
    while b/continue
        set an/nextUtf8 pack32 lastCharOfUtf8String an/remaining
        if not isBasenbChar an/nextUtf8
            if eq 0 count an/res
                set an/res an/nextUtf8
            set b/continue false
        else
            if isBasenbDistinctRemainderChar an/nextUtf8
                if b/pastFirstBasenbChar
                    set b/continue false
                else
                    set an/res append an/nextUtf8 an/res
                    set n/tempArrayCount count an/nextUtf8
                    set an/remaining anSubset an/remaining 0 mul -1 n/tempArrayCount
                    set b/pastFirstBasenbChar true
            else
                set an/res append an/nextUtf8 an/res
                set n/tempArrayCount count an/nextUtf8
                set an/remaining anSubset an/remaining 0 mul -1 n/tempArrayCount
    return an/res
