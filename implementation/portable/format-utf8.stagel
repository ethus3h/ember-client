r/an/dcaToUtf8 an/content
    assertIsDcArray an/content
    new an/res
    new n/l
    set n/l count an/content
    new n/c
    set n/c 0
    new an/temp
    new n/dcAtIndex
    new an/unmappables
    new n/unmappablesCount
    new n/unmappablesCounter
    new an/unmappablesIntermediatePacked
    new b/foundAnyUnmappables
    set b/foundAnyUnmappables false
    new as/variantSettings
    set as/variantSettings utf8VariantSettings 'out'
    new b/dcBasenbEnabled
    set b/dcBasenbEnabled contains as/variantSettings 'dcBasenb'
    while lt n/c n/l
        set n/dcAtIndex get an/content n/c
        set an/temp dcToFormat 'utf8' n/dcAtIndex
        if eq 0 count an/temp
            if b/dcBasenbEnabled
                set an/unmappables push an/unmappables n/dcAtIndex
            else
                exportWarningUnmappable n/c n/dcAtIndex
        else
            if b/dcBasenbEnabled
                set n/unmappablesCount count an/unmappables
                if gt 0 n/unmappablesCount
                    if not b/foundAnyUnmappables
                        set an/res append an/res getArmoredUtf8EmbeddedStartUuid
                    set b/foundAnyUnmappables true
                    # We've gotten to the end of a string of unmappable characters, so convert them to PUA characters
                    set n/unmappablesCounter 0
                    while lt n/unmappablesCounter n/unmappablesCount
                        # The packing method for this works basically like UTF8, where each character is mapped to a series of bytes. So, first  get the bytearray for the character we're on.
                        set an/unmappablesIntermediatePacked append an/unmappablesIntermediatePacked pack32 get an/unmappables n/unmappablesCounter
                        set n/unmappablesCounter add n/unmappablesCounter 1
                    set an/res append an/res bytearrayToBase17bUtf8 an/unmappablesIntermediatePacked
                    set an/unmappables ( )
                    set an/unmappablesIntermediatePacked ( )
        set an/res append an/res an/temp
        set n/c add n/c 1
    if and b/dcBasenbEnabled b/foundAnyUnmappables
        set an/res append an/res getArmoredUtf8EmbeddedEndUuid
    assertIsByteArray an/res
    return an/res

r/an/dcaFromUtf8 an/content
    new an/res
    new an/remaining
    set an/remaining an/content
    new an/temp
    new an/latestChar
    new n/dcBasenbUuidMonitorState
    set n/dcBasenbUuidMonitorState 0
    new as/variantSettings
    set as/variantSettings utf8VariantSettings 'in'
    new b/dcBasenbEnabled
    set b/dcBasenbEnabled contains as/variantSettings 'dcBasenb'
    new b/inDcBasenbSection
    set b/inDcBasenbSection false
    while not eq 0 count an/remaining
        set an/temp ( )
        set an/latestChar firstCharOfUtf8String an/remaining
        if b/dcBasenbEnabled
            if not b/inDcBasenbSection
                # 8 characters for uuid. Probably a better way to do this but oh well. Got them with new TextEncoder().encode('[char]'); etc.
                if eq dcBasenbUuidMonitorState 0
                    if arrEq an/latestChar ( 244 141 129 157 )
                        set dcBasenbUuidMonitorState 1
                elif eq dcBasenbUuidMonitorState 1
                    if arrEq an/latestChar ( 244 139 182 128 )
                        set dcBasenbUuidMonitorState 2
                    else
                        set dcBasenbUuidMonitorState 0
                elif eq dcBasenbUuidMonitorState 2
                    if arrEq an/latestChar ( 243 188 183 162 )
                        set dcBasenbUuidMonitorState 3
                    else
                        set dcBasenbUuidMonitorState 0
                elif eq dcBasenbUuidMonitorState 3
                    if arrEq an/latestChar ( 243 186 128 138 )
                        set dcBasenbUuidMonitorState 4
                    else
                        set dcBasenbUuidMonitorState 0
                elif eq dcBasenbUuidMonitorState 4
                    if arrEq an/latestChar ( 243 184 165 142 )
                        set dcBasenbUuidMonitorState 5
                    else
                        set dcBasenbUuidMonitorState 0
                elif eq dcBasenbUuidMonitorState 5
                    if arrEq an/latestChar ( 244 136 186 141 )
                        set dcBasenbUuidMonitorState 6
                    else
                        set dcBasenbUuidMonitorState 0
                elif eq dcBasenbUuidMonitorState 6
                    if arrEq an/latestChar ( 243 178 139 160 )
                        set dcBasenbUuidMonitorState 7
                    else
                        set dcBasenbUuidMonitorState 0
                elif eq dcBasenbUuidMonitorState 7
                    if arrEq an/latestChar ( 244 143 186 144 )
                        set dcBasenbUuidMonitorState 0
                        set b/inDcBasenbSection true
            else
                if eq dcBasenbUuidMonitorState 0
                    if arrEq an/latestChar ( 243 188 133 185 )
                        set dcBasenbUuidMonitorState 1
                elif eq dcBasenbUuidMonitorState 1
                    if arrEq an/latestChar ( 243 180 182 175 )
                        set dcBasenbUuidMonitorState 2
                    else
                        set dcBasenbUuidMonitorState 0
                elif eq dcBasenbUuidMonitorState 2
                    if arrEq an/latestChar ( 244 136 161 186 )
                        set dcBasenbUuidMonitorState 3
                    else
                        set dcBasenbUuidMonitorState 0
                elif eq dcBasenbUuidMonitorState 3
                    if arrEq an/latestChar ( 243 191 148 138 )
                        set dcBasenbUuidMonitorState 4
                    else
                        set dcBasenbUuidMonitorState 0
                elif eq dcBasenbUuidMonitorState 4
                    if arrEq an/latestChar ( 244 134 178 166 )
                        set dcBasenbUuidMonitorState 5
                    else
                        set dcBasenbUuidMonitorState 0
                elif eq dcBasenbUuidMonitorState 5
                    if arrEq an/latestChar ( 244 141 184 130 )
                        set dcBasenbUuidMonitorState 6
                    else
                        set dcBasenbUuidMonitorState 0
                elif eq dcBasenbUuidMonitorState 6
                    if arrEq an/latestChar ( 243 178 128 176 )
                        set dcBasenbUuidMonitorState 7
                    else
                        set dcBasenbUuidMonitorState 0
                elif eq dcBasenbUuidMonitorState 7
                    if arrEq an/latestChar ( 244 143 188 157 )
                        set dcBasenbUuidMonitorState 0
                        set b/inDcBasenbSection false
        set an/temp append an/temp an/latestChar
        set an/res append an/res dcFromFormat 'unicode' an/temp
        set an/remaining anSubset an/remaining count an/temp } -1
    return an/res

r/as/utf8VariantSettings s/direction
    new as/res
    new s/enabledVariants
    set s/enabledVariants getSettingForFormat 'utf8' s/direction 'variants'
    # TODO: Support multiple variants enabled (chop up the value of the s/enabledVariants string into its constituent variants)
    set as/res push as/res s/enabledVariants
    return as/res

r/an/dcaToDcbnbUtf8 an/content
    # convenience wrapper
    new an/res
    pushImportSettings getFormatId 'utf8' } 'variants:dcBasenb,'
    set an/res dcaToUtf8 an/content
    popImportSettings getFormatId 'utf8'
    return an/res

r/an/dcaFromDcbnbUtf8 an/content
    # convenience wrapper
    new an/res
    pushImportSettings getFormatId 'utf8' } 'variants:dcBasenb,'
    set an/res dcaFromUtf8 an/content
    popImportSettings getFormatId 'utf8'
    return an/res
