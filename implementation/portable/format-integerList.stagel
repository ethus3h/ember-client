r/an/dcaFromIntegerList an/content
    assertIsByteArray an/content
    new an/ret

    # Accepts an array of bytes representing an ASCII list of integers representing Dcs. Returns an array of Dcs. This format is the same as sems but without supporting comments.

    new s/parserState
    set s/parserState 'dc'
    new s/currentDc
    set s/currentDc ''
    new n/contentLength
    set n/contentLength count an/content
    new n/byteOffset
    new n/currentByte
    while lt n/byteOffset n/contentLength
        # do something with each byte in the array. an/content[n/byteOffset] holds the decimal value of the given byte. These are Dcs encoded as ASCII text bytes, rather than an array of Dcs.
        set n/currentByte get an/content n/byteOffset
        if eq s/parserState 'dc'
            if asciiIsDigit n/currentByte
                set s/currentDc cat s/currentDc charFromByte n/currentByte
            elif asciiIsSpace n/currentByte
                set an/ret push an/ret intFromIntStr s/currentDc
                set s/currentDc ''
            else
                die 'Unexpected parser state in integerList document.'
        elif eq s/parserState 'comment'
            if asciiIsNewline n/currentByte
                set s/parserState 'dc'
            else
                # Do nothing: comments are ignored
        else
            die 'Internal error: unexpected parser state while parsing integerList document'
        set n/byteOffset add n/byteOffset 1
    assertIsDcArray an/ret
    return an/ret

r/an/dcaToIntegerList an/contents
        assertIsDcArray an/dcIn
    new an/out
    new n/len
    set n/len count an/dcIn
    new n/inputIndex
    set n/inputIndex 0
    new n/dcAtIndex
    while lt n/inputIndex n/len
        set n/dcAtIndex get an/dcIn n/inputIndex
        # FIXME: doesn't accept HTML-renderable Dcs (then how are they getting rendered?!)
        if or or dcIsNewline n/dcAtIndex } dcIsPrintable n/dcAtIndex } } dcIsSpace n/dcAtIndex
            set an/out push an/out dcToFormat 'HTML' n/dcAtIndex
        set n/inputIndex add n/inputIndex 1
    #assertIsByteArray an/out
    return an/out
