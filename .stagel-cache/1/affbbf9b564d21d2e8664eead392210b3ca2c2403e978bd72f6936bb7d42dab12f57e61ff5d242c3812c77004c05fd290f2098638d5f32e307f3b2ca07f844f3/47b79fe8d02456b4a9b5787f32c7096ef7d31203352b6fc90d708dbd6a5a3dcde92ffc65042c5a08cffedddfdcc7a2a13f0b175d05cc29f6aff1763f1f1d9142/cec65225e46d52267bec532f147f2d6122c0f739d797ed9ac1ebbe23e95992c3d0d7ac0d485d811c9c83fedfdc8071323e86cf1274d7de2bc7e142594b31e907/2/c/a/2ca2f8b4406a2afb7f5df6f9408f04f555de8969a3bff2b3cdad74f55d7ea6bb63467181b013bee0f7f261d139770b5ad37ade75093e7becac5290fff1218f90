runTestsFormatUtf8() {
    boolV="$1"; shift; StageL_internalDebugCollect "bool V = $boolV; "; StageL_internalDebugStackEnter 'runTestsFormatUtf8:format-utf8-tests'; StageL_assertIsBool "$boolV"

    StageL_testing "$boolV" 'formatUtf8'
    # FIXME: Update tests for new remainder character format.
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '35' '18' '36')" "$(StageL_dcaFromUtf8 "$(join_by $'\037' '49' '32' '50')")")"
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '49' '32' '50')" "$(StageL_dcaToUtf8 "$(join_by $'\037' '35' '18' '36')")")"
    # Test for converting to UTF8+dcbnb with only one unmappable char at the end
    StageL_runTest "$boolV" "$(StageL_arrEq "$(StageL_append "$(join_by $'\037' '49' '32' '50')" "$(StageL_append "$(StageL_getArmoredUtf8EmbeddedStartUuid )" "$(StageL_append "$(join_by $'\037' '244' '131' '173' '156' '239' '159' '185')" "$(StageL_getArmoredUtf8EmbeddedEndUuid )" )" )" )" "$(StageL_dcaToDcbnbUtf8 "$(join_by $'\037' '35' '18' '36' '291')")")"
    # Test for converting to UTF8+dcbnb with intermixed mappable and nonmappable
    StageL_runTest "$boolV" "$(StageL_arrEq "$(StageL_append "$(join_by $'\037' '49' '32' '50')" "$(StageL_append "$(StageL_getArmoredUtf8EmbeddedStartUuid )" "$(StageL_append "$(join_by $'\037' '244' '131' '173' '156' '239' '159' '185' '50')" "$(StageL_getArmoredUtf8EmbeddedEndUuid )" )" )" )" "$(StageL_dcaToDcbnbUtf8 "$(join_by $'\037' '35' '18' '36' '291' '36')")")"
    # Tests for converting from UTF8+dcbnb
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '35' '18' '36' '291' '36')" "$(StageL_dcaFromDcbnbUtf8 "$(StageL_append "$(join_by $'\037' '49' '32' '50')" "$(StageL_append "$(StageL_getArmoredUtf8EmbeddedStartUuid )" "$(StageL_append "$(join_by $'\037' '244' '131' '173' '156' '244' '143' '191' '173' '50')" "$(StageL_getArmoredUtf8EmbeddedEndUuid )")")")")")"
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '35' '18' '36' '291')" "$(StageL_dcaFromDcbnbUtf8 "$(StageL_append "$(join_by $'\037' '49' '32' '50')" "$(StageL_append "$(StageL_getArmoredUtf8EmbeddedStartUuid )" "$(StageL_append "$(join_by $'\037' '244' '131' '173' '156' '244' '143' '191' '173')" "$(StageL_getArmoredUtf8EmbeddedEndUuid )")")")")")"
    # Make sure the dcbnb region gets output at the right place relative to the other chars (there's a bug where it outputs 18 18 11 instead of 18 11 18)
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '18' '11' '18')" "$(StageL_dcaFromDcbnbUtf8 "$(StageL_append "$(join_by $'\037' '32')" "$(StageL_append "$(StageL_getArmoredUtf8EmbeddedStartUuid )" "$(StageL_append "$(join_by $'\037' '244' '143' '191' '180' '244' '143' '191' '181')" "$(StageL_append "$(StageL_getArmoredUtf8EmbeddedEndUuid )" "$(join_by $'\037' '32')")")")")")")"
    # Same as the previous test, but with the spaces inside the start and end UUIDs. Works even though the previous one failed.
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '18' '11' '18')" "$(StageL_dcaFromDcbnbUtf8 "$(StageL_append "$(StageL_getArmoredUtf8EmbeddedStartUuid )" "$(StageL_append "$(join_by $'\037' '32' '244' '143' '191' '180' '244' '143' '191' '181' '32')" "$(StageL_getArmoredUtf8EmbeddedEndUuid )")")")")"
    # Like the test after next but with only the first region
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '89' '7')" "$(StageL_dcaFromDcbnbUtf8 "$(join_by $'\037' '104' '244' '141' '129' '157' '244' '139' '182' '128' '243' '188' '183' '162' '243' '186' '128' '138' '243' '184' '165' '142' '244' '136' '186' '141' '243' '178' '139' '160' '244' '143' '186' '144' '244' '143' '191' '184' '244' '143' '191' '181' '243' '188' '133' '185' '243' '180' '182' '175' '244' '136' '161' '186' '243' '191' '148' '138' '244' '134' '178' '166' '244' '141' '184' '130' '243' '178' '128' '176' '244' '143' '188' '157')")")"
    # Second half of the subsequent test
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '11')" "$(StageL_dcaFromDcbnbUtf8 "$(join_by $'\037' '244' '141' '129' '157' '244' '139' '182' '128' '243' '188' '183' '162' '243' '186' '128' '138' '243' '184' '165' '142' '244' '136' '186' '141' '243' '178' '139' '160' '244' '143' '186' '144' '244' '143' '191' '180' '244' '143' '191' '181' '243' '188' '133' '185' '243' '180' '182' '175' '244' '136' '161' '186' '243' '191' '148' '138' '244' '134' '178' '166' '244' '141' '184' '130' '243' '178' '128' '176' '244' '143' '188' '157')")")"
    # Two dcbnb regions: The two halves work separately, but fail when together
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '89' '7' '11')" "$(StageL_dcaFromDcbnbUtf8 "$(join_by $'\037' '104' '244' '141' '129' '157' '244' '139' '182' '128' '243' '188' '183' '162' '243' '186' '128' '138' '243' '184' '165' '142' '244' '136' '186' '141' '243' '178' '139' '160' '244' '143' '186' '144' '244' '143' '191' '184' '244' '143' '191' '181' '243' '188' '133' '185' '243' '180' '182' '175' '244' '136' '161' '186' '243' '191' '148' '138' '244' '134' '178' '166' '244' '141' '184' '130' '243' '178' '128' '176' '244' '143' '188' '157' '244' '141' '129' '157' '244' '139' '182' '128' '243' '188' '183' '162' '243' '186' '128' '138' '243' '184' '165' '142' '244' '136' '186' '141' '243' '178' '139' '160' '244' '143' '186' '144' '244' '143' '191' '180' '244' '143' '191' '181' '243' '188' '133' '185' '243' '180' '182' '175' '244' '136' '161' '186' '243' '191' '148' '138' '244' '134' '178' '166' '244' '141' '184' '130' '243' '178' '128' '176' '244' '143' '188' '157')")")"
    # It fails without the leading h as well. The issue is that the ( 7 11 ) mysteriously becomes ( 65533 65533 ) when they are together.
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '7' '11')" "$(StageL_dcaFromDcbnbUtf8 "$(join_by $'\037' '244' '141' '129' '157' '244' '139' '182' '128' '243' '188' '183' '162' '243' '186' '128' '138' '243' '184' '165' '142' '244' '136' '186' '141' '243' '178' '139' '160' '244' '143' '186' '144' '244' '143' '191' '184' '244' '143' '191' '181' '243' '188' '133' '185' '243' '180' '182' '175' '244' '136' '161' '186' '243' '191' '148' '138' '244' '134' '178' '166' '244' '141' '184' '130' '243' '178' '128' '176' '244' '143' '188' '157' '244' '141' '129' '157' '244' '139' '182' '128' '243' '188' '183' '162' '243' '186' '128' '138' '243' '184' '165' '142' '244' '136' '186' '141' '243' '178' '139' '160' '244' '143' '186' '144' '244' '143' '191' '180' '244' '143' '191' '181' '243' '188' '133' '185' '243' '180' '182' '175' '244' '136' '161' '186' '243' '191' '148' '138' '244' '134' '178' '166' '244' '141' '184' '130' '243' '178' '128' '176' '244' '143' '188' '157')")")"
    # With the h in the middle separating the two dcbnb regions
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '7' '89' '11')" "$(StageL_dcaFromDcbnbUtf8 "$(join_by $'\037' '244' '141' '129' '157' '244' '139' '182' '128' '243' '188' '183' '162' '243' '186' '128' '138' '243' '184' '165' '142' '244' '136' '186' '141' '243' '178' '139' '160' '244' '143' '186' '144' '244' '143' '191' '184' '244' '143' '191' '181' '243' '188' '133' '185' '243' '180' '182' '175' '244' '136' '161' '186' '243' '191' '148' '138' '244' '134' '178' '166' '244' '141' '184' '130' '243' '178' '128' '176' '244' '143' '188' '157' '104' '244' '141' '129' '157' '244' '139' '182' '128' '243' '188' '183' '162' '243' '186' '128' '138' '243' '184' '165' '142' '244' '136' '186' '141' '243' '178' '139' '160' '244' '143' '186' '144' '244' '143' '191' '180' '244' '143' '191' '181' '243' '188' '133' '185' '243' '180' '182' '175' '244' '136' '161' '186' '243' '191' '148' '138' '244' '134' '178' '166' '244' '141' '184' '130' '243' '178' '128' '176' '244' '143' '188' '157')")")"
    # "h\u{10d05d}\u{10bd80}\u{fcde2}\u{fa00a}\u{f894e}\u{108e8d}\u{f22e0}\u{10fe90}\u{10fff8}\u{10fff5}\u{fc179}\u{f4daf}\u{10887a}\u{ff50a}\u{106ca6}\u{10de02}\u{f2030}\u{10ff1d}\u{10d05d}\u{10bd80}\u{fcde2}\u{fa00a}\u{f894e}\u{108e8d}\u{f22e0}\u{10fe90}\u{10fff4}\u{10fff5}\u{fc179}\u{f4daf}\u{10887a}\u{ff50a}\u{106ca6}\u{10de02}\u{f2030}\u{10ff1d}" "244,141,129,157,244,139,182,128,243,188,183,162,243,186,128,138,243,184,165,142,244,136,186,141,243,178,139,160,244,143,186,144,244,143,191,184,244,143,191,181,243,188,133,185,243,180,182,175,244,136,161,186,243,191,148,138,244,134,178,166,244,141,184,130,243,178,128,176,244,143,188,157" "244,141,129,157,244,139,182,128,243,188,183,162,243,186,128,138,243,184,165,142,244,136,186,141,243,178,139,160,244,143,186,144,244,143,191,180,244,143,191,181,243,188,133,185,243,180,182,175,244,136,161,186,243,191,148,138,244,134,178,166,244,141,184,130,243,178,128,176,244,143,188,157"
    # Test for a bug that results in the output being 16 uppercase letter Bs
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '6')" "$(StageL_dcaFromDcbnbFragmentUtf8 "$(join_by $'\037' '244' '143' '191' '185' '239' '160' '129')")")"
    # A simple one with new format remainder character
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '82' '86' '5')" "$(StageL_dcaFromDcbnbFragmentUtf8 "$(join_by $'\037' '97' '101' '244' '143' '191' '186' '239' '160' '129')")")"
    # Tests for dcbnbGetLastChar
    # 82 86 5
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '244' '143' '191' '186' '239' '160' '129')" "$(StageL_dcbnbGetLastChar "$(join_by $'\037' '97' '101' '244' '143' '191' '186' '239' '160' '129')")")"
    # invalid
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' )" "$(StageL_dcbnbGetLastChar "$(join_by $'\037' '239' '160' '129')")")"
    # invalid
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' )" "$(StageL_dcbnbGetLastChar "$(join_by $'\037' '97' '101' '244' '143' '191' '186')")")"
    # invalid 82
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '82')" "$(StageL_dcbnbGetLastChar "$(join_by $'\037' '244' '143' '191' '186' '97')")")"
    # Tests for dcbnbGetFirstChar
    # 5 82 86
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '244' '143' '191' '186' '239' '160' '129')" "$(StageL_dcbnbGetFirstChar "$(join_by $'\037' '244' '143' '191' '186' '239' '160' '129' '97' '101')")")"
    # invalid
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' )" "$(StageL_dcbnbGetFirstChar "$(join_by $'\037' '239' '160' '129')")")"
    # invalid 82 86
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' )" "$(StageL_dcbnbGetFirstChar "$(join_by $'\037' '239' '160' '129' '97' '101')")")"
    # invalid 82 86
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' )" "$(StageL_dcbnbGetFirstChar "$(join_by $'\037' '244' '143' '191' '186' '97' '101')")")"
    # 86 invalid
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '86')" "$(StageL_dcbnbGetFirstChar "$(join_by $'\037' '101' '244' '143' '191' '186')")")"
    # Tests for utf8CharArrayFromByteArray and vice versa
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '50' '53' '54' '32' '50' '53' '56' '32' '50' '54' '48' '32' '50' '54' '50' '32' '50' '54' '52' '32' '50' '54' '51' '32' '53' '55' '32' '56' '54' '32' '57' '51' '32' '57' '51' '32' '57' '54' '32' '51' '48' '32' '49' '56' '32' '50' '56' '54' '32' '55' '50' '32' '57' '54' '32' '57' '57' '32' '57' '51' '32' '56' '53' '32' '50' '56' '55' '32' '49' '57' '32' '49' '56' '32' '50' '56' '52' '32' '50' '54' '49' '32' '50' '53' '57' '32' '35' '32' '115' '97' '121' '32' '34' '72' '101' '108' '108' '111' '44' '32' '47' '87' '111' '114' '108' '100' '47' '33' '32' '9917' '34' '10' '49' '32' '50' '32' '35' '32' '9917' '10')" "$(StageL_utf8CharArrayFromByteArray "$(join_by $'\037' '50' '53' '54' '32' '50' '53' '56' '32' '50' '54' '48' '32' '50' '54' '50' '32' '50' '54' '52' '32' '50' '54' '51' '32' '53' '55' '32' '56' '54' '32' '57' '51' '32' '57' '51' '32' '57' '54' '32' '51' '48' '32' '49' '56' '32' '50' '56' '54' '32' '55' '50' '32' '57' '54' '32' '57' '57' '32' '57' '51' '32' '56' '53' '32' '50' '56' '55' '32' '49' '57' '32' '49' '56' '32' '50' '56' '52' '32' '50' '54' '49' '32' '50' '53' '57' '32' '35' '32' '115' '97' '121' '32' '34' '72' '101' '108' '108' '111' '44' '32' '47' '87' '111' '114' '108' '100' '47' '33' '32' '226' '154' '189' '34' '10' '49' '32' '50' '32' '35' '32' '226' '154' '189' '10')")")"
    StageL_runTest "$boolV" "$(StageL_arrEq "$(join_by $'\037' '50' '53' '54' '32' '50' '53' '56' '32' '50' '54' '48' '32' '50' '54' '50' '32' '50' '54' '52' '32' '50' '54' '51' '32' '53' '55' '32' '56' '54' '32' '57' '51' '32' '57' '51' '32' '57' '54' '32' '51' '48' '32' '49' '56' '32' '50' '56' '54' '32' '55' '50' '32' '57' '54' '32' '57' '57' '32' '57' '51' '32' '56' '53' '32' '50' '56' '55' '32' '49' '57' '32' '49' '56' '32' '50' '56' '52' '32' '50' '54' '49' '32' '50' '53' '57' '32' '35' '32' '115' '97' '121' '32' '34' '72' '101' '108' '108' '111' '44' '32' '47' '87' '111' '114' '108' '100' '47' '33' '32' '226' '154' '189' '34' '10' '49' '32' '50' '32' '35' '32' '226' '154' '189' '10')" "$(StageL_byteArrayFromUtf8CharArray "$(join_by $'\037' '50' '53' '54' '32' '50' '53' '56' '32' '50' '54' '48' '32' '50' '54' '50' '32' '50' '54' '52' '32' '50' '54' '51' '32' '53' '55' '32' '56' '54' '32' '57' '51' '32' '57' '51' '32' '57' '54' '32' '51' '48' '32' '49' '56' '32' '50' '56' '54' '32' '55' '50' '32' '57' '54' '32' '57' '57' '32' '57' '51' '32' '56' '53' '32' '50' '56' '55' '32' '49' '57' '32' '49' '56' '32' '50' '56' '52' '32' '50' '54' '49' '32' '50' '53' '57' '32' '35' '32' '115' '97' '121' '32' '34' '72' '101' '108' '108' '111' '44' '32' '47' '87' '111' '114' '108' '100' '47' '33' '32' '9917' '34' '10' '49' '32' '50' '32' '35' '32' '9917' '10')")")"

    StageL_internalDebugStackExit;
}
