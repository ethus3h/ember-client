dependency tree for intFromBase36Char:
    internalDebugCollect
        none

    internalDebugStackEnter
        implDie
        internalDebugFlush
        internalDebugQuiet

    assertIsStr
        assertionFailed

    assertIsInt
        assertionFailed

    assertIsChar
        internalDebugCollect
        internalDebugStackEnter
        assertIsStr
        assertIsTrue
        isChar
        internalDebugStackExit

    strToUpper
        internalDebugCollect
        internalDebugStackEnter
        assertIsStr
        len
        implLt
        implCat
        charToUpper
        strCharAtPos
        implAdd
        assertIsStr
        internalDebugStackExit

    byteFromChar
        assertIsStr
        assertIsTrue
        assertIsInt

    ge
    
async function ge(intA, intB) {
    await internalDebugCollect('int A = ' + intA + '; '); await internalDebugCollect('int B = ' + intB + '; '); await internalDebugStackEnter('ge:comparison'); await assertIsInt(intA);await assertIsInt(intB); let boolReturn;

    let boolTemp = false;
    boolTemp = await implEq(intA, intB);
    boolTemp = await or(boolTemp, await implGt(intA, intB));

    boolReturn = boolTemp; await assertIsBool(boolReturn); await internalDebugStackExit(); return boolReturn;
}

    implGt
    
async function implGt(intA, intB) {
    await assertIsInt(intA); await assertIsInt(intB); let boolReturn;

    boolReturn = intA > intB; await assertIsBool(boolReturn); return boolReturn;
}
    implDie
    
async function implDie(strMessage) {
    // Don't call await assertIsStr(strMessage); here since it can call implDie and cause a recursive loop

    await implError(strMessage);

    throw strMessage;
}
async function implDie(strMessage) {
    // Don't call await assertIsStr(strMessage); here since it can call implDie and cause a recursive loop

    await implError(strMessage);

    throw strMessage;
}

    implCat
    implSub
    implNot
    intIsBetween
    implNot
    internalDebugStackExit
