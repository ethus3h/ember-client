dependency tree for intFromBase36Char:
    internalDebugCollect
        none

    internalDebugStackEnter
        implDie
        internalDebugFlush
        internalDebugQuiet

    assertIsStr
        assertionFailed

    assertIsInt
        assertionFailed

    assertIsChar
    

async function assertIsChar(strIn) {
    await internalDebugCollect('str In = ' + strIn + '; '); await internalDebugStackEnter('assertIsChar:assertions'); await assertIsStr(strIn);

    await assertIsTrue(await isChar(strIn));
    await internalDebugStackExit();
}

    strToUpper
    
async function strToUpper(strStr) {
    await internalDebugCollect('str Str = ' + strStr + '; '); await internalDebugStackEnter('strToUpper:strings'); await assertIsStr(strStr); let strReturn;

    let strRes = '';
    let intI = 0;
    intI = 0;
    let intCount = 0;
    intCount = await len(strStr);
    while (await implLt(intI, intCount)) {
        strRes = await implCat(strRes, await charToUpper(await strCharAtPos(strStr, intI)));
        intI = await implAdd(intI, 1);
    }

    strReturn = strRes; await assertIsStr(strReturn); await internalDebugStackExit(); return strReturn;
}

    byteFromChar
    
async function byteFromChar(strInput) {
    await assertIsStr(strInput);
    // Bear in mind that StageL doesn't attempt to support Unicode.
    // We can't use assertIsChar here, because it depends on byteFromChar.
    let intReturn;
    intReturn = strInput.charCodeAt(0);

    await assertIsTrue(intReturn > 31);
    await assertIsTrue(intReturn < 127);

    await assertIsInt(intReturn); return intReturn;
}
    ge
    implGt
    implDie
    implCat
    implSub
    implNot
    intIsBetween
    implNot
    internalDebugStackExit
