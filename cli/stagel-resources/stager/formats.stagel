r/an/convertFormats an/in s/inFormat s/outFormat
    assertIsByteArray an/in
    new an/out
    set an/out dcToFormat dcFromFormat an/in s/inFormat } s/outFormat
    assertIsByteArray an/out
    return an/out

r/an/dcToFormat an/dcArrayIn s/outputFormat
    new an/res
    if eq s/outputFormat 'sems'
        set an/res dcToSems an/dcArrayIn
    elif eq s/outputFormat 'immutableCharacterCells'
        set an/res dcToImmutableCharacterCells an/dcArrayIn
    elif eq s/outputFormat 'HTML'
        set an/res dcToHTML an/dcArrayIn
    else
        die cat 'Unimplemented document render target format: ' s/outputFormat

r/an/dcFromFormat an/contentBytes s/inputFormat
    assertIsByteArray an/contentBytes
    new an/ret
    if eq s/inputFormat 'sems'
        set an/ret dcarrParseSems an/contentBytes
    else
        error cat 'Unimplemented document parsing format: ' s/inputFormat
    assertIsDcArray an/ret
    return an/ret

r/as/listInputFormats
    new as/res
    set as/res [ 'sems' ]
    return as/res

r/b/isSupportedInputFormat s/in
    new b/res
    set b/res contains listInputFormats } s/in
    return b/res

r/as/listOutputFormats
    new as/res
    set as/res [ 'characterCells' 'HTML' 'integerList' 'immutableCharacterCells' ]
    return as/res

r/b/isSupportedOutputFormat s/in
    new b/res
    set b/res contains listOutputFormats } s/in
    return b/res

r/as/listEnvironmentCharEncodings
    new as/res
    set as/res [ 'ASCII-safe-subset' 'UTF-8' ]
    return as/res

r/b/isSupportedEnvironmentCharEncoding s/in
    new b/res
    set b/res contains listEnvironmentCharEncodings } s/in
    return b/res
