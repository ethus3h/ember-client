r/an/dcaFromFormat s/inFormat an/contentBytes
    assertIsSupportedInputFormat s/inFormat
    assertIsByteArray an/contentBytes
    new an/ret
    if eq s/inFormat 'sems'
        set an/ret dcaFromSems an/contentBytes
    else
        error cat 'Unimplemented document parsing format: ' s/inFormat
    assertIsDcArray an/ret
    return an/ret

r/an/dcaToFormat s/outFormat an/dcArrayIn
    assertIsSupportedOutputFormat s/outFormat
    assertIsDcArray an/dcArrayIn
    new an/res
    if eq s/outFormat 'sems'
        set an/res dcaToSems an/dcArrayIn
    elif eq s/outFormat 'immutableCharacterCells'
        set an/res dcaToImmutableCharacterCells an/dcArrayIn
    elif eq s/outFormat 'HTML'
        set an/res dcaToHTML an/dcArrayIn
    else
        die cat 'Unimplemented document render target format: ' s/outFormat
    assertIsByteArray an/res
    return an/res

r/an/convertFormats s/inFormat s/outFormat an/in
    assertIsSupportedInputFormat s/inFormat
    assertIsSupportedOutputFormat s/outFormat
    assertIsByteArray an/in
    new an/out
    set an/out dcaToFormat dcaFromFormat an/in s/inFormat } s/outFormat
    assertIsByteArray an/out
    return an/out

r/as/listInputFormats
    new as/res
    set as/res [ 'sems' ]
    return as/res

r/b/isSupportedInputFormat s/in
    new b/res
    set b/res contains listInputFormats } s/in
    return b/res

r/as/listOutputFormats
    new as/res
    set as/res [ 'characterCells' 'HTML' 'integerList' 'immutableCharacterCells' ]
    return as/res

r/b/isSupportedOutputFormat s/in
    new b/res
    set b/res contains listOutputFormats } s/in
    return b/res

r/as/listEnvironmentCharEncodings
    new as/res
    set as/res [ 'ASCII-safe-subset' 'UTF-8' ]
    return as/res

r/b/isSupportedEnvironmentCharEncoding s/in
    new b/res
    set b/res contains listEnvironmentCharEncodings } s/in
    return b/res

r/an/dcToFormat n/dc s/targetFormat
    # Output byte array for a single dc, or an empty array if no output is available. Only operates on one Dc at a time. Some formats may not need this; calling with them is an error and should cause an assertion failure.
    assertIsDc n/dc
    new an/res
    if or eq s/targetFormat 'UTF-8' } eq s/targetFormat 'ASCII-safe-subset'
        set an/res push an/res hexToDec dcDataLookupByValue 'mappings/from/unicode' 1 n/dc 0
        return an/res
    elif eq s/targetFormat 'HTML'
        set s/res dcDataLookupByValue 'mappings/from/unicode' 1 n/dc 0
        if isBaseStr s/res 16
            set an/res hexToDec s/res
        else
            set an/res dcDataLookupByValue 'mappings/to/html' 0 n/dc 1
        return an/res
    else
        error cat 'Unimplemented character return format: ' s/targetFormat
    # Return an empty string if the Dc isn't printable. I don't think it should be an error to call this for a nonprintable Dc.
    return an/res

r/an/dcFromFormat s/inFormat an/contentBytes
    # Retrieve dc corresponding to the input byte array, or an empty array if no match. Only operates on one Dc at a time. Some formats (e.g. sems) don't need this; calling with them is an error and should cause an assertion failure.
    assertIsSupportedInputFormat s/inFormat
    assertIsByteArray an/contentBytes
    new an/ret
    if eq s/inFormat 'nothing-yet'
        # there isn't anything that uses this yet
    else
    assertIsDcArray an/ret
    return an/ret

r/an/dcToFormat s/outFormat an/dcArrayIn
    assertIsSupportedOutputFormat s/outFormat
    assertIsDcArray an/dcArrayIn
    new an/res
    if eq s/outFormat 'sems'
        set an/res dcaToSems an/dcArrayIn
    elif eq s/outFormat 'immutableCharacterCells'
        set an/res dcaToImmutableCharacterCells an/dcArrayIn
    elif eq s/outFormat 'HTML'
        set an/res dcaToHTML an/dcArrayIn
    else
        die cat 'Unimplemented character output format: ' s/outFormat
    assertIsByteArray an/res
    return an/res
