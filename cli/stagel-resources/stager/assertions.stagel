#r/v/assertIsTrue b/in
#    if ne b/in true
#        assertionFailed cat bool ' is not true.'

r/v/assertIsByte n/in
    assertIsTrue isByte n/in

r/v/assertIsArray ga/in
    # Just a convenience wrapper
    assertIsGenericArray ga/in

r/b/isChar s/in
    new b/res
    set b/res isCharByte byteFromChar s/in
    return b/res

r/v/assertIsChar s/in
    assertIsTrue isChar s/in

r/b/isCharByte n/in
    # Bear in mind that StageL doesn't attempt to support Unicode.
    new b/res
    set b/res intIsBetween n/in 32 126
    return b/res

r/v/assertIsCharByte n/in
    assertIsTrue isCharByte n/in

r/b/strContainsOnlyInt s/in
    # Positive int, specifically. Only digits allowed.
    new n/temp
    set n/temp len s/in
    new n/i
    set n/i 0
    new b/res
    set b/res true
    while lt n/i n/temp
        if not asciiIsDigit byteFromChar strCharAtPos s/in n/i
            set b/res false
        set n/i add n/i 1
    return b/res

r/b/isDc n/in
    return isNonnegative n/in

r/v/assertIsDc n/in
    assertIsNonnegative n/in

r/v/assertStrContainsOnlyInt s/in
    if not strContainsOnlyInt s/in
        assertionFailed cat s/in ' does not only contain an integer.'

r/v/assertIsNonnegative n/in
    if not isNonnegative n/in
        new s/temp
        set s/temp strFrom n/in
        assertionFailed cat s/temp ' is negative.'

r/v/assertIsSupportedBase n/b
    assertIsTrue isSupportedBase n/b

r/v/assertIsBaseDigit s/in n/b
    assertIsTrue isBaseDigit s/in n/b

r/v/assertIsBaseStr s/in n/b
    assertIsTrue isBaseStr s/in n/b
