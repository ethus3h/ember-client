#r/v/assertIsTrue b/in
#    if ne b/in true
#        assertionFailed cat bool ' is not true.'

r/v/assertIsByte n/in
    assertIsTrue isByte n/in

r/v/assertIsArray ga/in
    # Just a convenience wrapper
    assertIsGenericArray ga/in

r/v/assertIsChar g/in
    assertIsTrue isChar g/in

r/v/assertIsCharByte n/in
    assertIsTrue isCharByte n/in

r/v/assertIsDc g/in
    assertIsTrue isDc g/in

r/v/assertStrContainsOnlyInt s/in
    if not strContainsOnlyInt s/in
        assertionFailed cat s/in ' does not only contain an integer.'

r/v/assertIsNonnegative n/in
    if not isNonnegative n/in
        new s/temp
        set s/temp strFrom n/in
        assertionFailed cat s/temp ' is negative.'

r/v/assertIsSupportedBase n/b
    assertIsTrue isSupportedBase n/b

r/v/assertIsBaseDigit s/in n/b
    assertIsTrue isBaseDigit s/in n/b

r/v/assertIsBaseStr s/in n/b
    assertIsTrue isBaseStr s/in n/b

r/v/assertIsIntArray gi/in
    assertIsTrue isIntArray gi/in

r/v/assertIsBoolArray gi/in
    assertIsTrue isBoolArray gi/in

r/v/assertIsStrArray gi/in
    assertIsTrue isStrArray gi/in

r/v/assertIsCharArray gi/in
    assertIsTrue isCharArray gi/in

r/v/assertIsByteArray gi/in n/b
    assertIsTrue isByteArray gi/in

r/v/assertIsDcArray gi/in n/b
    assertIsTrue isDcArray gi/in
