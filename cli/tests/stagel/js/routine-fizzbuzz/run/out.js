async function fbSwitcher(intNum) {
    await assertIsInt(intNum); let strReturn;

    await if(declare -a arr=()
)
await implEq(    await (declare -a arr=([0]="literal-n" [1]="")
)
await implMod(    await (declare -a arr=([0]="ident-n" [1]="num")
)
    await (declare -a arr=([0]="literal-n" [1]=$'\017')
)
    await (declare -a arr=()
)
    await (declare -a arr=()
)
    await (declare -a arr=()
)
    await (declare -a arr=()
)
    await (declare -a arr=()
)
        /* just a literal sequence of bytes. Everything should be binary safe. 0x could be used to return data, too. 0x = data, not numbers, in StageL. */
        await (declare -a arr=([0]="literal-s" [1]="FizzBuzz")
)
        await (declare -a arr=()
)
    /* Comment */
    await if(declare -a arr=()
)
await implEq(    await (declare -a arr=([0]="literal-n" [1]="")
)
await implMod(    await (declare -a arr=([0]="ident-n" [1]="num")
)
    await (declare -a arr=([0]="literal-n" [1]=$'\005')
)
    await (declare -a arr=()
)
    await (declare -a arr=()
)
    await (declare -a arr=()
)
    await (declare -a arr=()
)
    await (declare -a arr=()
)
        /* Comment 2 */
        await (declare -a arr=([0]="literal-s" [1]="Buzz")
)
        await (declare -a arr=()
)
        /* Comment 3 */
    /* Could also write it like this, with the condition on another line */
    await if(declare -a arr=()
)
    await (declare -a arr=()
)
await implEq(        await (declare -a arr=([0]="literal-n" [1]="")
)
await implMod(        await (declare -a arr=([0]="ident-n" [1]="num")
)
        await (declare -a arr=([0]="literal-n" [1]=$'\003')
)
        await (declare -a arr=()
)
        await (declare -a arr=()
)
        await (declare -a arr=()
)
        /* Comment 4 */
        await (declare -a arr=([0]="literal-s" [1]="Fizz")
)
        await (declare -a arr=()
)
}
/* A string is an array of 8-bit bytes. */
    await return-assert(declare -a arr=()
)
    /* the output should be non-empty. */
    await -n(declare -a arr=()
)
    await (declare -a arr=()
)
    await (declare -a arr=()
)
    await (declare -a arr=()
)
    await new(declare -a arr=()
)
    await (declare -a arr=([0]="ident-n" [1]="counter")
)
    await (declare -a arr=([0]="literal-n" [1]=$'\001')
)
    await (declare -a arr=()
)
    await until(declare -a arr=()
)
    await (declare -a arr=()
)
await implEq(        await (declare -a arr=([0]="ident-n" [1]="counter")
)
        await (declare -a arr=([0]="literal-n" [1]="d")
)
        await (declare -a arr=()
)
        await set(declare -a arr=()
)
        await (declare -a arr=([0]="ident-n" [1]="counter")
)
await implAdd(        await (declare -a arr=([0]="ident-n" [1]="counter")
)
        await (declare -a arr=([0]="literal-n" [1]=$'\001')
)
        await (declare -a arr=()
)
        await (declare -a arr=()
)
        await (declare -a arr=()
)
        await (declare -a arr=([0]="ident-r-s" [1]="fbSwitcher")
)
        await (declare -a arr=([0]="ident-n" [1]="counter")
)
        await (declare -a arr=()
)
