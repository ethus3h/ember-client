#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

# Takes a StageL file as first argument, and prints out equivalent code in the language of the second argument (bash/js).

# | hexdump -v -e '1/1 "%02X\n"' | tr ' ' '\12' | sed 's/5C/5C\n5C/g' | sed 's/0A/5C\n0A/g' | tr '\12' ' ' | xxd -r -p | tr '\0' '\12' >> ".egup.stat" || die ".egup.stat"" could not be generated!"
#  | while IFS= read -rd '' statPath; IFS= read -rd '' statLink; IFS= read -rd '' statStat; do

input="$1"
targetLang="$2"
set -x
hexdump -v -e '1/1 "%02X\n"' < "$input" | while read -r byte; do
    byte=$(( 16#$byte )) # Convert to decimal
    if asciiIsPrintable "$byte"; then
        print "Pr $byte "
    elif asciiIsNewline "$byte"; then
        echo "Nl $byte "
    else
        die "Unexpected byte $byte."
    fi
    tokens=()
    parserState="dc"
    let intContentLength = await intBytearrayLength(bytearrayContent);
    for (let intByteOffset = 0; intByteOffset < await intBytearrayLength(bytearrayContent); intByteOffset++) {
        // do something with each byte in the array. bytearrayContent[intByteOffset] holds the decimal value of the given byte. These are Dcs encoded as ASCII text bytes, rather than an array of Dcs.
        switch (strParserState) {
            case "dc":
                if (await boolAsciiIsDigit(bytearrayContent[intByteOffset])) {
                    strCurrentDc = strCurrentDc + await strFromByte(bytearrayContent[intByteOffset]);
                }
                if (await boolAsciiIsSpace(bytearrayContent[intByteOffset])) {
                    await customTypeDcarrPush(dcarrParseResults, strCurrentDc);
                    strCurrentDc = "";
                }
                if (bytearrayContent[intByteOffset] == 35) { // pound sign: start comment
                    strParserState = "comment";
                }
                break;
            case "comment":
                if (await boolAsciiIsNewline(bytearrayContent[intByteOffset])) {
                    strParserState = "dc";
                }
                break;
        }
    }
    dcarrReturn = dcarrParseResults; await assertIsDcarr(dcarrReturn); return dcarrReturn;
done
