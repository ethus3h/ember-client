#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

# Takes a StageL file as first argument, and prints out equivalent code in the language of the second argument (bash/js).

input="$1"
targetLang="$2"

tokens=()
# Add empty slots to the array for the first token
tokens+="" # Token type goes in even numbered slots
tokens+="" # Token content goes in odd numbered slots
parserState="token"
currentToken=""

hexdump -v -e '1/1 "%02X\n"' < "$input" | while read -r byte; do
    byte=$(( 16#$byte )) # Convert to decimal
    if asciiIsPrintable "$byte"; then
        print "Pr $byte "
    elif asciiIsNewline "$byte"; then
        echo "Nl $byte "
    else
        die "Unexpected byte $byte."
    fi
    case $parserState in
    token)
        if asciiIsLetter "$byte"; then
            tokens[-1]="${tokens[-1]} $byte"
        elif asciiIsSpace "$byte"; then
            # End of token
            tokens+=""
            tokens+=""
        elif asciiIsNewline "$byte"; then
            # End of token
            tokens+=""
            tokens+=""
        elif [[ "$byte" == 35 ]]; then
            parserState="comment"
            tokens[-2]="comment"
            tokens[-1]="${tokens[-1]} $byte"
        else
            die "Unexpected byte $byte."
        fi
        ;;
    comment)
        if asciiIsNewline "$byte"; then
            parserState="token"
            tokens+=""
            tokens+=""
        elif asciiIsPrintable "$byte"; then
            tokens[-1]="${tokens[-1]} $byte"
        else
            die "Non-printable byte $byte in a comment."
        fi
        ;;
    *)
        die "Unknown parser state $parserState."
        ;;
    esac
done
print_r "$tokens"
